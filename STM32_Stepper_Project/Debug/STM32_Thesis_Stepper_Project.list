
STM32_Thesis_Stepper_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  08005c28  08005c28  00006c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006794  08006794  00008364  2**0
                  CONTENTS
  4 .ARM          00000000  08006794  08006794  00008364  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006794  08006794  00008364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006794  08006794  00007794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  0800679c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000364  08006b00  00008364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08006b00  0000846c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f932  00000000  00000000  00008394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c6  00000000  00000000  00017cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0001a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000969  00000000  00000000  0001b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015886  00000000  00000000  0001bc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bdd  00000000  00000000  0003151f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aba4  00000000  00000000  000420fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000bcce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000bff1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000364 	.word	0x20000364
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005c10 	.word	0x08005c10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000368 	.word	0x20000368
 8000204:	08005c10 	.word	0x08005c10

08000208 <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8000210:	2300      	movs	r3, #0
 8000212:	73fb      	strb	r3, [r7, #15]
 8000214:	e01a      	b.n	800024c <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	011b      	lsls	r3, r3, #4
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	2200      	movs	r2, #0
 800022c:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	011b      	lsls	r3, r3, #4
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	011b      	lsls	r3, r3, #4
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	3301      	adds	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d9e1      	bls.n	8000216 <L6470_ResetAppCmdPkg+0xe>
  }
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	4603      	mov	r3, r0
 800026c:	73fb      	strb	r3, [r7, #15]
 800026e:	4613      	mov	r3, r2
 8000270:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	011b      	lsls	r3, r3, #4
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	4413      	add	r3, r2
 800027a:	7bba      	ldrb	r2, [r7, #14]
 800027c:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	011b      	lsls	r3, r3, #4
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	4413      	add	r3, r2
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	4413      	add	r3, r2
 8000292:	69ba      	ldr	r2, [r7, #24]
 8000294:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	011b      	lsls	r3, r3, #4
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4413      	add	r3, r2
 800029e:	69fa      	ldr	r2, [r7, #28]
 80002a0:	60da      	str	r2, [r3, #12]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60b9      	str	r1, [r7, #8]
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	4603      	mov	r3, r0
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	4613      	mov	r3, r2
 80002c0:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <L6470_PrepareAppCmdPkg+0x44>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d105      	bne.n	80002d6 <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <L6470_PrepareAppCmdPkg+0x44>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80002d0:	68b8      	ldr	r0, [r7, #8]
 80002d2:	f7ff ff99 	bl	8000208 <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80002d6:	7bba      	ldrb	r2, [r7, #14]
 80002d8:	7bf8      	ldrb	r0, [r7, #15]
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	69bb      	ldr	r3, [r7, #24]
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	f7ff ffbb 	bl	8000260 <L6470_FillAppCmdPkg>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200003b0 	.word	0x200003b0

080002f8 <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8000306:	2300      	movs	r3, #0
 8000308:	73bb      	strb	r3, [r7, #14]
 800030a:	e013      	b.n	8000334 <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800030c:	2300      	movs	r3, #0
 800030e:	73fb      	strb	r3, [r7, #15]
 8000310:	e00a      	b.n	8000328 <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000312:	7b7b      	ldrb	r3, [r7, #13]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	737a      	strb	r2, [r7, #13]
 8000318:	461a      	mov	r2, r3
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	4413      	add	r3, r2
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	3301      	adds	r3, #1
 8000326:	73fb      	strb	r3, [r7, #15]
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d9f1      	bls.n	8000312 <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800032e:	7bbb      	ldrb	r3, [r7, #14]
 8000330:	3301      	adds	r3, #1
 8000332:	73bb      	strb	r3, [r7, #14]
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	2b03      	cmp	r3, #3
 8000338:	d9e8      	bls.n	800030c <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800033a:	2300      	movs	r3, #0
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	e1f6      	b.n	800072e <L6470_PrepareDaisyChainCommand+0x436>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	441a      	add	r2, r3
 8000352:	49a5      	ldr	r1, [pc, #660]	@ (80005e8 <L6470_PrepareDaisyChainCommand+0x2f0>)
 8000354:	4603      	mov	r3, r0
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	1a1b      	subs	r3, r3, r0
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	330c      	adds	r3, #12
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	011b      	lsls	r3, r3, #4
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b12      	cmp	r3, #18
 8000370:	f200 81da 	bhi.w	8000728 <L6470_PrepareDaisyChainCommand+0x430>
 8000374:	a201      	add	r2, pc, #4	@ (adr r2, 800037c <L6470_PrepareDaisyChainCommand+0x84>)
 8000376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037a:	bf00      	nop
 800037c:	08000729 	.word	0x08000729
 8000380:	080003c9 	.word	0x080003c9
 8000384:	0800044f 	.word	0x0800044f
 8000388:	0800047d 	.word	0x0800047d
 800038c:	080004e5 	.word	0x080004e5
 8000390:	08000513 	.word	0x08000513
 8000394:	0800057b 	.word	0x0800057b
 8000398:	080005b7 	.word	0x080005b7
 800039c:	0800062b 	.word	0x0800062b
 80003a0:	080006c7 	.word	0x080006c7
 80003a4:	08000729 	.word	0x08000729
 80003a8:	08000729 	.word	0x08000729
 80003ac:	08000729 	.word	0x08000729
 80003b0:	08000729 	.word	0x08000729
 80003b4:	08000729 	.word	0x08000729
 80003b8:	08000729 	.word	0x08000729
 80003bc:	08000729 	.word	0x08000729
 80003c0:	08000729 	.word	0x08000729
 80003c4:	08000729 	.word	0x08000729
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	7819      	ldrb	r1, [r3, #0]
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	011b      	lsls	r3, r3, #4
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	685a      	ldr	r2, [r3, #4]
 80003da:	4884      	ldr	r0, [pc, #528]	@ (80005ec <L6470_PrepareDaisyChainCommand+0x2f4>)
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4403      	add	r3, r0
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	6838      	ldr	r0, [r7, #0]
 80003ec:	4403      	add	r3, r0
 80003ee:	430a      	orrs	r2, r1
 80003f0:	b2d2      	uxtb	r2, r2
 80003f2:	701a      	strb	r2, [r3, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	011b      	lsls	r3, r3, #4
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	4413      	add	r3, r2
 80003fc:	685a      	ldr	r2, [r3, #4]
 80003fe:	497b      	ldr	r1, [pc, #492]	@ (80005ec <L6470_PrepareDaisyChainCommand+0x2f4>)
 8000400:	4613      	mov	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	440b      	add	r3, r1
 800040a:	330e      	adds	r3, #14
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000410:	2301      	movs	r3, #1
 8000412:	73bb      	strb	r3, [r7, #14]
 8000414:	e016      	b.n	8000444 <L6470_PrepareDaisyChainCommand+0x14c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	7b39      	ldrb	r1, [r7, #12]
 8000422:	7bbb      	ldrb	r3, [r7, #14]
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	fa22 f103 	lsr.w	r1, r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	005a      	lsls	r2, r3, #1
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	4413      	add	r3, r2
 8000434:	461a      	mov	r2, r3
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	4413      	add	r3, r2
 800043a:	b2ca      	uxtb	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800043e:	7bbb      	ldrb	r3, [r7, #14]
 8000440:	3301      	adds	r3, #1
 8000442:	73bb      	strb	r3, [r7, #14]
 8000444:	7b3a      	ldrb	r2, [r7, #12]
 8000446:	7bbb      	ldrb	r3, [r7, #14]
 8000448:	429a      	cmp	r2, r3
 800044a:	d2e4      	bcs.n	8000416 <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 800044c:	e16c      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	683a      	ldr	r2, [r7, #0]
 8000452:	4413      	add	r3, r2
 8000454:	7819      	ldrb	r1, [r3, #0]
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	011b      	lsls	r3, r3, #4
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	4862      	ldr	r0, [pc, #392]	@ (80005ec <L6470_PrepareDaisyChainCommand+0x2f4>)
 8000462:	4613      	mov	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4413      	add	r3, r2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4403      	add	r3, r0
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	6838      	ldr	r0, [r7, #0]
 8000472:	4403      	add	r3, r0
 8000474:	430a      	orrs	r2, r1
 8000476:	b2d2      	uxtb	r2, r2
 8000478:	701a      	strb	r2, [r3, #0]
      break;
 800047a:	e155      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	4413      	add	r3, r2
 8000482:	7819      	ldrb	r1, [r3, #0]
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	4413      	add	r3, r2
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	4858      	ldr	r0, [pc, #352]	@ (80005f0 <L6470_PrepareDaisyChainCommand+0x2f8>)
 8000490:	4613      	mov	r3, r2
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	4413      	add	r3, r2
 8000496:	4403      	add	r3, r0
 8000498:	3308      	adds	r3, #8
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	6838      	ldr	r0, [r7, #0]
 80004a0:	4403      	add	r3, r0
 80004a2:	430a      	orrs	r2, r1
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80004a8:	2301      	movs	r3, #1
 80004aa:	73bb      	strb	r3, [r7, #14]
 80004ac:	e016      	b.n	80004dc <L6470_PrepareDaisyChainCommand+0x1e4>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	f1c3 0303 	rsb	r3, r3, #3
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	fa22 f103 	lsr.w	r1, r2, r3
 80004c4:	7bbb      	ldrb	r3, [r7, #14]
 80004c6:	005a      	lsls	r2, r3, #1
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	4413      	add	r3, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	4413      	add	r3, r2
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	3301      	adds	r3, #1
 80004da:	73bb      	strb	r3, [r7, #14]
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d9e5      	bls.n	80004ae <L6470_PrepareDaisyChainCommand+0x1b6>
      }
      break;
 80004e2:	e121      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	4413      	add	r3, r2
 80004ea:	7819      	ldrb	r1, [r3, #0]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	483e      	ldr	r0, [pc, #248]	@ (80005f0 <L6470_PrepareDaisyChainCommand+0x2f8>)
 80004f8:	4613      	mov	r3, r2
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	4413      	add	r3, r2
 80004fe:	4403      	add	r3, r0
 8000500:	3308      	adds	r3, #8
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	6838      	ldr	r0, [r7, #0]
 8000508:	4403      	add	r3, r0
 800050a:	430a      	orrs	r2, r1
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	701a      	strb	r2, [r3, #0]
      break;
 8000510:	e10a      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	4413      	add	r3, r2
 8000518:	7819      	ldrb	r1, [r3, #0]
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	011b      	lsls	r3, r3, #4
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	4832      	ldr	r0, [pc, #200]	@ (80005f0 <L6470_PrepareDaisyChainCommand+0x2f8>)
 8000526:	4613      	mov	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	4413      	add	r3, r2
 800052c:	4403      	add	r3, r0
 800052e:	3308      	adds	r3, #8
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	4403      	add	r3, r0
 8000538:	430a      	orrs	r2, r1
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800053e:	2301      	movs	r3, #1
 8000540:	73bb      	strb	r3, [r7, #14]
 8000542:	e016      	b.n	8000572 <L6470_PrepareDaisyChainCommand+0x27a>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	f1c3 0303 	rsb	r3, r3, #3
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	fa22 f103 	lsr.w	r1, r2, r3
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	005a      	lsls	r2, r3, #1
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	4413      	add	r3, r2
 8000562:	461a      	mov	r2, r3
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	4413      	add	r3, r2
 8000568:	b2ca      	uxtb	r2, r1
 800056a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	3301      	adds	r3, #1
 8000570:	73bb      	strb	r3, [r7, #14]
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	2b03      	cmp	r3, #3
 8000576:	d9e5      	bls.n	8000544 <L6470_PrepareDaisyChainCommand+0x24c>
      }      
      break;
 8000578:	e0d6      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800057a:	2301      	movs	r3, #1
 800057c:	73bb      	strb	r3, [r7, #14]
 800057e:	e016      	b.n	80005ae <L6470_PrepareDaisyChainCommand+0x2b6>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	f1c3 0303 	rsb	r3, r3, #3
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	fa22 f103 	lsr.w	r1, r2, r3
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	005a      	lsls	r2, r3, #1
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	4413      	add	r3, r2
 800059e:	461a      	mov	r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	b2ca      	uxtb	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005a8:	7bbb      	ldrb	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73bb      	strb	r3, [r7, #14]
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9e5      	bls.n	8000580 <L6470_PrepareDaisyChainCommand+0x288>
      }
      break;
 80005b4:	e0b8      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <L6470_PrepareDaisyChainCommand+0x2f8>)
 80005ca:	4613      	mov	r3, r2
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	4413      	add	r3, r2
 80005d0:	4403      	add	r3, r0
 80005d2:	3308      	adds	r3, #8
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	6838      	ldr	r0, [r7, #0]
 80005da:	4403      	add	r3, r0
 80005dc:	430a      	orrs	r2, r1
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80005e2:	2301      	movs	r3, #1
 80005e4:	73bb      	strb	r3, [r7, #14]
 80005e6:	e01c      	b.n	8000622 <L6470_PrepareDaisyChainCommand+0x32a>
 80005e8:	08006398 	.word	0x08006398
 80005ec:	080061a4 	.word	0x080061a4
 80005f0:	080064a4 	.word	0x080064a4
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	f1c3 0303 	rsb	r3, r3, #3
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	fa22 f103 	lsr.w	r1, r2, r3
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	005a      	lsls	r2, r3, #1
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4413      	add	r3, r2
 8000612:	461a      	mov	r2, r3
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	b2ca      	uxtb	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	73bb      	strb	r3, [r7, #14]
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d9e5      	bls.n	80005f4 <L6470_PrepareDaisyChainCommand+0x2fc>
      }
      break;
 8000628:	e07e      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b259      	sxtb	r1, r3
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	4841      	ldr	r0, [pc, #260]	@ (8000744 <L6470_PrepareDaisyChainCommand+0x44c>)
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	4403      	add	r3, r0
 8000648:	3304      	adds	r3, #4
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	430b      	orrs	r3, r1
 8000652:	b259      	sxtb	r1, r3
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	4413      	add	r3, r2
 800065a:	b2ca      	uxtb	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4413      	add	r3, r2
 8000664:	7819      	ldrb	r1, [r3, #0]
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	4835      	ldr	r0, [pc, #212]	@ (8000748 <L6470_PrepareDaisyChainCommand+0x450>)
 8000672:	4613      	mov	r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	4403      	add	r3, r0
 800067a:	3308      	adds	r3, #8
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	4403      	add	r3, r0
 8000684:	430a      	orrs	r2, r1
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800068a:	2301      	movs	r3, #1
 800068c:	73bb      	strb	r3, [r7, #14]
 800068e:	e016      	b.n	80006be <L6470_PrepareDaisyChainCommand+0x3c6>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	68da      	ldr	r2, [r3, #12]
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	f1c3 0303 	rsb	r3, r3, #3
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	fa22 f103 	lsr.w	r1, r2, r3
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	005a      	lsls	r2, r3, #1
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	4413      	add	r3, r2
 80006ae:	461a      	mov	r2, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	b2ca      	uxtb	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	3301      	adds	r3, #1
 80006bc:	73bb      	strb	r3, [r7, #14]
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d9e5      	bls.n	8000690 <L6470_PrepareDaisyChainCommand+0x398>
      }
      break;
 80006c4:	e030      	b.n	8000728 <L6470_PrepareDaisyChainCommand+0x430>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b259      	sxtb	r1, r3
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <L6470_PrepareDaisyChainCommand+0x44c>)
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	4403      	add	r3, r0
 80006e4:	3304      	adds	r3, #4
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	430b      	orrs	r3, r1
 80006ee:	b259      	sxtb	r1, r3
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	b2ca      	uxtb	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	7819      	ldrb	r1, [r3, #0]
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	480e      	ldr	r0, [pc, #56]	@ (8000748 <L6470_PrepareDaisyChainCommand+0x450>)
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4413      	add	r3, r2
 8000714:	4403      	add	r3, r0
 8000716:	3308      	adds	r3, #8
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	6838      	ldr	r0, [r7, #0]
 800071e:	4403      	add	r3, r0
 8000720:	430a      	orrs	r2, r1
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	701a      	strb	r2, [r3, #0]
      break;
 8000726:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b01      	cmp	r3, #1
 8000732:	f67f ae05 	bls.w	8000340 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	080064b8 	.word	0x080064b8
 8000748:	080064a4 	.word	0x080064a4

0800074c <Step_s_2_Speed>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t Step_s_2_Speed(float Step_s)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8000756:	edd7 7a01 	vldr	s15, [r7, #4]
 800075a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800078c <Step_s_2_Speed+0x40>
 800075e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d80a      	bhi.n	800077e <Step_s_2_Speed+0x32>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8000768:	ed97 7a01 	vldr	s14, [r7, #4]
 800076c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000790 <Step_s_2_Speed+0x44>
 8000770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000778:	ee17 3a90 	vmov	r3, s15
 800077c:	e000      	b.n	8000780 <Step_s_2_Speed+0x34>
  else
    return 0;   // Warning
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	4674241b 	.word	0x4674241b
 8000790:	3c74242a 	.word	0x3c74242a

08000794 <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800079e:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80007d8 <Step_s2_2_Acc+0x44>
 80007a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ae:	d80b      	bhi.n	80007c8 <Step_s2_2_Acc+0x34>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80007b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80007b4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80007dc <Step_s2_2_Acc+0x48>
 80007b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c0:	ee17 3a90 	vmov	r3, s15
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	e000      	b.n	80007ca <Step_s2_2_Acc+0x36>
  else
    return 0;   // Warning
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	4768c671 	.word	0x4768c671
 80007dc:	4168d4fe 	.word	0x4168d4fe

080007e0 <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 80007ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000824 <Step_s2_2_Dec+0x44>
 80007f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d80b      	bhi.n	8000814 <Step_s2_2_Dec+0x34>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 80007fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000800:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000828 <Step_s2_2_Dec+0x48>
 8000804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800080c:	ee17 3a90 	vmov	r3, s15
 8000810:	b29b      	uxth	r3, r3
 8000812:	e000      	b.n	8000816 <Step_s2_2_Dec+0x36>
  else
    return 0;   // Warning
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	4768c671 	.word	0x4768c671
 8000828:	4168d4fe 	.word	0x4168d4fe

0800082c <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8000836:	edd7 7a01 	vldr	s15, [r7, #4]
 800083a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000870 <Step_s_2_MaxSpeed+0x44>
 800083e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000846:	d80b      	bhi.n	8000860 <Step_s_2_MaxSpeed+0x34>
    return (uint16_t)(Step_s / ((float)15.2588));
 8000848:	ed97 7a01 	vldr	s14, [r7, #4]
 800084c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000874 <Step_s_2_MaxSpeed+0x48>
 8000850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000858:	ee17 3a90 	vmov	r3, s15
 800085c:	b29b      	uxth	r3, r3
 800085e:	e000      	b.n	8000862 <Step_s_2_MaxSpeed+0x36>
  else
    return 0;   // Warning
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	4673e702 	.word	0x4673e702
 8000874:	4174240b 	.word	0x4174240b

08000878 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8000882:	edd7 7a01 	vldr	s15, [r7, #4]
 8000886:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80008bc <Step_s_2_MinSpeed+0x44>
 800088a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000892:	d80b      	bhi.n	80008ac <Step_s_2_MinSpeed+0x34>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8000894:	ed97 7a01 	vldr	s14, [r7, #4]
 8000898:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80008c0 <Step_s_2_MinSpeed+0x48>
 800089c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a4:	ee17 3a90 	vmov	r3, s15
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	e000      	b.n	80008ae <Step_s_2_MinSpeed+0x36>
  else
    return 0;   // Warning
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	447414bf 	.word	0x447414bf
 80008c0:	3e742401 	.word	0x3e742401

080008c4 <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80008ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000910 <Step_s_2_FsSpd+0x4c>
 80008d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008de:	d80f      	bhi.n	8000900 <Step_s_2_FsSpd+0x3c>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80008e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80008e4:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000914 <Step_s_2_FsSpd+0x50>
 80008e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80008f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f8:	ee17 3a90 	vmov	r3, s15
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	e000      	b.n	8000902 <Step_s_2_FsSpd+0x3e>
  else
    return 0;   // Warning
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	4673e180 	.word	0x4673e180
 8000914:	41740000 	.word	0x41740000

08000918 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8000922:	edd7 7a01 	vldr	s15, [r7, #4]
 8000926:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800095c <Step_s_2_IntSpeed+0x44>
 800092a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d80b      	bhi.n	800094c <Step_s_2_IntSpeed+0x34>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8000934:	ed97 7a01 	vldr	s14, [r7, #4]
 8000938:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000960 <Step_s_2_IntSpeed+0x48>
 800093c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000944:	ee17 3a90 	vmov	r3, s15
 8000948:	b29b      	uxth	r3, r3
 800094a:	e000      	b.n	800094e <Step_s_2_IntSpeed+0x36>
  else
    return 0;   // Warning
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	44742023 	.word	0x44742023
 8000960:	3d7423f4 	.word	0x3d7423f4

08000964 <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800096e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000972:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80009a8 <s_Step_2_StSlp+0x44>
 8000976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	d80c      	bhi.n	800099a <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000980:	ed97 7a01 	vldr	s14, [r7, #4]
 8000984:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80009ac <s_Step_2_StSlp+0x48>
 8000988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800098c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000990:	edc7 7a00 	vstr	s15, [r7]
 8000994:	783b      	ldrb	r3, [r7, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	e000      	b.n	800099c <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	3b8311d9 	.word	0x3b8311d9
 80009ac:	3783956e 	.word	0x3783956e

080009b0 <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80009ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80009be:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80009f4 <s_Step_2_FnSlpAcc+0x44>
 80009c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ca:	d80c      	bhi.n	80009e6 <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80009cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80009d0:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80009f8 <s_Step_2_FnSlpAcc+0x48>
 80009d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009dc:	edc7 7a00 	vstr	s15, [r7]
 80009e0:	783b      	ldrb	r3, [r7, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	e000      	b.n	80009e8 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	3b8311d9 	.word	0x3b8311d9
 80009f8:	3783956e 	.word	0x3783956e

080009fc <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8000a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000a40 <s_Step_2_FnSlpDec+0x44>
 8000a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a16:	d80c      	bhi.n	8000a32 <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000a18:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a1c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000a44 <s_Step_2_FnSlpDec+0x48>
 8000a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a28:	edc7 7a00 	vstr	s15, [r7]
 8000a2c:	783b      	ldrb	r3, [r7, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	e000      	b.n	8000a34 <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	3b8311d9 	.word	0x3b8311d9
 8000a44:	3783956e 	.word	0x3783956e

08000a48 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8000a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a56:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000ae0 <mA_2_OcdTh+0x98>
 8000a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	d836      	bhi.n	8000ad2 <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8000a64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000ae4 <mA_2_OcdTh+0x9c>
 8000a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a70:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8000a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	edc7 7a00 	vstr	s15, [r7]
 8000a80:	783b      	ldrb	r3, [r7, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a94:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8000a98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa8:	d50a      	bpl.n	8000ac0 <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 8000aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab2:	edc7 7a00 	vstr	s15, [r7]
 8000ab6:	783b      	ldrb	r3, [r7, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	e009      	b.n	8000ad4 <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8000ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac8:	edc7 7a00 	vstr	s15, [r7]
 8000acc:	783b      	ldrb	r3, [r7, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	e000      	b.n	8000ad4 <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	45bb8000 	.word	0x45bb8000
 8000ae4:	43bb8000 	.word	0x43bb8000

08000ae8 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8000af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000af6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000b80 <mA_2_StallTh+0x98>
 8000afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b02:	d836      	bhi.n	8000b72 <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 8000b04:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b08:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000b84 <mA_2_StallTh+0x9c>
 8000b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b10:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8000b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b1c:	edc7 7a00 	vstr	s15, [r7]
 8000b20:	783b      	ldrb	r3, [r7, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b34:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8000b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d50a      	bpl.n	8000b60 <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 8000b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b52:	edc7 7a00 	vstr	s15, [r7]
 8000b56:	783b      	ldrb	r3, [r7, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	e009      	b.n	8000b74 <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8000b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b68:	edc7 7a00 	vstr	s15, [r7]
 8000b6c:	783b      	ldrb	r3, [r7, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	e000      	b.n	8000b74 <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	457a0000 	.word	0x457a0000
 8000b84:	41fa0000 	.word	0x41fa0000

08000b88 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	4603      	mov	r3, r0
 8000b90:	603a      	str	r2, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	460b      	mov	r3, r1
 8000b96:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000b98:	79ba      	ldrb	r2, [r7, #6]
 8000b9a:	79f8      	ldrb	r0, [r7, #7]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <L6470_SetParam+0x40>)
 8000baa:	f7ff fb81 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bae:	4907      	ldr	r1, [pc, #28]	@ (8000bcc <L6470_SetParam+0x44>)
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <L6470_SetParam+0x40>)
 8000bb2:	f7ff fba1 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000bb6:	4906      	ldr	r1, [pc, #24]	@ (8000bd0 <L6470_SetParam+0x48>)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <L6470_SetParam+0x44>)
 8000bba:	f000 fc61 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000380 	.word	0x20000380
 8000bcc:	200003a0 	.word	0x200003a0
 8000bd0:	200003a8 	.word	0x200003a8

08000bd4 <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	79f8      	ldrb	r0, [r7, #7]
 8000be8:	2200      	movs	r2, #0
 8000bea:	9201      	str	r2, [sp, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	9200      	str	r2, [sp, #0]
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	4910      	ldr	r1, [pc, #64]	@ (8000c34 <L6470_GetParam+0x60>)
 8000bf4:	f7ff fb5c 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000bf8:	490f      	ldr	r1, [pc, #60]	@ (8000c38 <L6470_GetParam+0x64>)
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <L6470_GetParam+0x60>)
 8000bfc:	f7ff fb7c 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c00:	490e      	ldr	r1, [pc, #56]	@ (8000c3c <L6470_GetParam+0x68>)
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <L6470_GetParam+0x64>)
 8000c04:	f000 fc3c 	bl	8001480 <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <L6470_GetParam+0x6c>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	330e      	adds	r3, #14
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4906      	ldr	r1, [pc, #24]	@ (8000c3c <L6470_GetParam+0x68>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fc7a 	bl	800151c <L6470_ExtractReturnedData>
 8000c28:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000380 	.word	0x20000380
 8000c38:	200003a0 	.word	0x200003a0
 8000c3c:	200003a8 	.word	0x200003a8
 8000c40:	080061a4 	.word	0x080061a4

08000c44 <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	603a      	str	r2, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	460b      	mov	r3, r1
 8000c52:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000c54:	79ba      	ldrb	r2, [r7, #6]
 8000c56:	79f8      	ldrb	r0, [r7, #7]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4613      	mov	r3, r2
 8000c62:	2203      	movs	r2, #3
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <L6470_Run+0x40>)
 8000c66:	f7ff fb23 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000c6a:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <L6470_Run+0x44>)
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <L6470_Run+0x40>)
 8000c6e:	f7ff fb43 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000c72:	4906      	ldr	r1, [pc, #24]	@ (8000c8c <L6470_Run+0x48>)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <L6470_Run+0x44>)
 8000c76:	f000 fc03 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000380 	.word	0x20000380
 8000c88:	200003a0 	.word	0x200003a0
 8000c8c:	200003a8 	.word	0x200003a8

08000c90 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	79f8      	ldrb	r0, [r7, #7]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	2204      	movs	r2, #4
 8000cae:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <L6470_StepClock+0x3c>)
 8000cb0:	f7ff fafe 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000cb4:	4906      	ldr	r1, [pc, #24]	@ (8000cd0 <L6470_StepClock+0x40>)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <L6470_StepClock+0x3c>)
 8000cb8:	f7ff fb1e 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000cbc:	4905      	ldr	r1, [pc, #20]	@ (8000cd4 <L6470_StepClock+0x44>)
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <L6470_StepClock+0x40>)
 8000cc0:	f000 fbde 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000380 	.word	0x20000380
 8000cd0:	200003a0 	.word	0x200003a0
 8000cd4:	200003a8 	.word	0x200003a8

08000cd8 <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	4603      	mov	r3, r0
 8000ce0:	603a      	str	r2, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	79f8      	ldrb	r0, [r7, #7]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	2205      	movs	r2, #5
 8000cf8:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <L6470_Move+0x40>)
 8000cfa:	f7ff fad9 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000cfe:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <L6470_Move+0x44>)
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <L6470_Move+0x40>)
 8000d02:	f7ff faf9 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000d06:	4906      	ldr	r1, [pc, #24]	@ (8000d20 <L6470_Move+0x48>)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <L6470_Move+0x44>)
 8000d0a:	f000 fbb9 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000380 	.word	0x20000380
 8000d1c:	200003a0 	.word	0x200003a0
 8000d20:	200003a8 	.word	0x200003a8

08000d24 <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d36:	d211      	bcs.n	8000d5c <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8000d38:	79f8      	ldrb	r0, [r7, #7]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	2206      	movs	r2, #6
 8000d46:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <L6470_GoTo+0x40>)
 8000d48:	f7ff fab2 	bl	80002b0 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000d4c:	4906      	ldr	r1, [pc, #24]	@ (8000d68 <L6470_GoTo+0x44>)
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <L6470_GoTo+0x40>)
 8000d50:	f7ff fad2 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000d54:	4905      	ldr	r1, [pc, #20]	@ (8000d6c <L6470_GoTo+0x48>)
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <L6470_GoTo+0x44>)
 8000d58:	f000 fb92 	bl	8001480 <L6470_DaisyChainCommand>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000380 	.word	0x20000380
 8000d68:	200003a0 	.word	0x200003a0
 8000d6c:	200003a8 	.word	0x200003a8

08000d70 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	4603      	mov	r3, r0
 8000d78:	603a      	str	r2, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d86:	d212      	bcs.n	8000dae <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8000d88:	79ba      	ldrb	r2, [r7, #6]
 8000d8a:	79f8      	ldrb	r0, [r7, #7]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	2207      	movs	r2, #7
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <L6470_GoToDir+0x48>)
 8000d9a:	f7ff fa89 	bl	80002b0 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000d9e:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <L6470_GoToDir+0x4c>)
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <L6470_GoToDir+0x48>)
 8000da2:	f7ff faa9 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000da6:	4906      	ldr	r1, [pc, #24]	@ (8000dc0 <L6470_GoToDir+0x50>)
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <L6470_GoToDir+0x4c>)
 8000daa:	f000 fb69 	bl	8001480 <L6470_DaisyChainCommand>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000380 	.word	0x20000380
 8000dbc:	200003a0 	.word	0x200003a0
 8000dc0:	200003a8 	.word	0x200003a8

08000dc4 <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	71bb      	strb	r3, [r7, #6]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8000dd8:	79b9      	ldrb	r1, [r7, #6]
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	79f8      	ldrb	r0, [r7, #7]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	9201      	str	r2, [sp, #4]
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	460b      	mov	r3, r1
 8000de6:	2208      	movs	r2, #8
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <L6470_GoUntil+0x44>)
 8000dea:	f7ff fa61 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000dee:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <L6470_GoUntil+0x48>)
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <L6470_GoUntil+0x44>)
 8000df2:	f7ff fa81 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000df6:	4906      	ldr	r1, [pc, #24]	@ (8000e10 <L6470_GoUntil+0x4c>)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <L6470_GoUntil+0x48>)
 8000dfa:	f000 fb41 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000380 	.word	0x20000380
 8000e0c:	200003a0 	.word	0x200003a0
 8000e10:	200003a8 	.word	0x200003a8

08000e14 <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	71bb      	strb	r3, [r7, #6]
 8000e22:	4613      	mov	r3, r2
 8000e24:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8000e26:	79ba      	ldrb	r2, [r7, #6]
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	79f8      	ldrb	r0, [r7, #7]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	9101      	str	r1, [sp, #4]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4613      	mov	r3, r2
 8000e34:	2209      	movs	r2, #9
 8000e36:	4907      	ldr	r1, [pc, #28]	@ (8000e54 <L6470_ReleaseSW+0x40>)
 8000e38:	f7ff fa3a 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000e3c:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <L6470_ReleaseSW+0x44>)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <L6470_ReleaseSW+0x40>)
 8000e40:	f7ff fa5a 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000e44:	4905      	ldr	r1, [pc, #20]	@ (8000e5c <L6470_ReleaseSW+0x48>)
 8000e46:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <L6470_ReleaseSW+0x44>)
 8000e48:	f000 fb1a 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000380 	.word	0x20000380
 8000e58:	200003a0 	.word	0x200003a0
 8000e5c:	200003a8 	.word	0x200003a8

08000e60 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8000e6a:	79f8      	ldrb	r0, [r7, #7]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	220a      	movs	r2, #10
 8000e78:	4907      	ldr	r1, [pc, #28]	@ (8000e98 <L6470_GoHome+0x38>)
 8000e7a:	f7ff fa19 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000e7e:	4907      	ldr	r1, [pc, #28]	@ (8000e9c <L6470_GoHome+0x3c>)
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <L6470_GoHome+0x38>)
 8000e82:	f7ff fa39 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000e86:	4906      	ldr	r1, [pc, #24]	@ (8000ea0 <L6470_GoHome+0x40>)
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <L6470_GoHome+0x3c>)
 8000e8a:	f000 faf9 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000380 	.word	0x20000380
 8000e9c:	200003a0 	.word	0x200003a0
 8000ea0:	200003a8 	.word	0x200003a8

08000ea4 <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8000eae:	79f8      	ldrb	r0, [r7, #7]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	220b      	movs	r2, #11
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <L6470_GoMark+0x38>)
 8000ebe:	f7ff f9f7 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000ec2:	4907      	ldr	r1, [pc, #28]	@ (8000ee0 <L6470_GoMark+0x3c>)
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <L6470_GoMark+0x38>)
 8000ec6:	f7ff fa17 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000eca:	4906      	ldr	r1, [pc, #24]	@ (8000ee4 <L6470_GoMark+0x40>)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <L6470_GoMark+0x3c>)
 8000ece:	f000 fad7 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000380 	.word	0x20000380
 8000ee0:	200003a0 	.word	0x200003a0
 8000ee4:	200003a8 	.word	0x200003a8

08000ee8 <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8000ef2:	79f8      	ldrb	r0, [r7, #7]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	220c      	movs	r2, #12
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <L6470_ResetPos+0x38>)
 8000f02:	f7ff f9d5 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f06:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <L6470_ResetPos+0x3c>)
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <L6470_ResetPos+0x38>)
 8000f0a:	f7ff f9f5 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f0e:	4906      	ldr	r1, [pc, #24]	@ (8000f28 <L6470_ResetPos+0x40>)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <L6470_ResetPos+0x3c>)
 8000f12:	f000 fab5 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000380 	.word	0x20000380
 8000f24:	200003a0 	.word	0x200003a0
 8000f28:	200003a8 	.word	0x200003a8

08000f2c <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8000f36:	79f8      	ldrb	r0, [r7, #7]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	220d      	movs	r2, #13
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <L6470_ResetDevice+0x38>)
 8000f46:	f7ff f9b3 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f4a:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <L6470_ResetDevice+0x3c>)
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <L6470_ResetDevice+0x38>)
 8000f4e:	f7ff f9d3 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f52:	4906      	ldr	r1, [pc, #24]	@ (8000f6c <L6470_ResetDevice+0x40>)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <L6470_ResetDevice+0x3c>)
 8000f56:	f000 fa93 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000380 	.word	0x20000380
 8000f68:	200003a0 	.word	0x200003a0
 8000f6c:	200003a8 	.word	0x200003a8

08000f70 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8000f7a:	79f8      	ldrb	r0, [r7, #7]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	220e      	movs	r2, #14
 8000f88:	4907      	ldr	r1, [pc, #28]	@ (8000fa8 <L6470_SoftStop+0x38>)
 8000f8a:	f7ff f991 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f8e:	4907      	ldr	r1, [pc, #28]	@ (8000fac <L6470_SoftStop+0x3c>)
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <L6470_SoftStop+0x38>)
 8000f92:	f7ff f9b1 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f96:	4906      	ldr	r1, [pc, #24]	@ (8000fb0 <L6470_SoftStop+0x40>)
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <L6470_SoftStop+0x3c>)
 8000f9a:	f000 fa71 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000380 	.word	0x20000380
 8000fac:	200003a0 	.word	0x200003a0
 8000fb0:	200003a8 	.word	0x200003a8

08000fb4 <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8000fbe:	79f8      	ldrb	r0, [r7, #7]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	220f      	movs	r2, #15
 8000fcc:	4907      	ldr	r1, [pc, #28]	@ (8000fec <L6470_HardStop+0x38>)
 8000fce:	f7ff f96f 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000fd2:	4907      	ldr	r1, [pc, #28]	@ (8000ff0 <L6470_HardStop+0x3c>)
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <L6470_HardStop+0x38>)
 8000fd6:	f7ff f98f 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000fda:	4906      	ldr	r1, [pc, #24]	@ (8000ff4 <L6470_HardStop+0x40>)
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <L6470_HardStop+0x3c>)
 8000fde:	f000 fa4f 	bl	8001480 <L6470_DaisyChainCommand>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000380 	.word	0x20000380
 8000ff0:	200003a0 	.word	0x200003a0
 8000ff4:	200003a8 	.word	0x200003a8

08000ff8 <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8001002:	79f8      	ldrb	r0, [r7, #7]
 8001004:	2300      	movs	r3, #0
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	2300      	movs	r3, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2300      	movs	r3, #0
 800100e:	2210      	movs	r2, #16
 8001010:	4907      	ldr	r1, [pc, #28]	@ (8001030 <L6470_SoftHiZ+0x38>)
 8001012:	f7ff f94d 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001016:	4907      	ldr	r1, [pc, #28]	@ (8001034 <L6470_SoftHiZ+0x3c>)
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <L6470_SoftHiZ+0x38>)
 800101a:	f7ff f96d 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800101e:	4906      	ldr	r1, [pc, #24]	@ (8001038 <L6470_SoftHiZ+0x40>)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <L6470_SoftHiZ+0x3c>)
 8001022:	f000 fa2d 	bl	8001480 <L6470_DaisyChainCommand>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000380 	.word	0x20000380
 8001034:	200003a0 	.word	0x200003a0
 8001038:	200003a8 	.word	0x200003a8

0800103c <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8001046:	79f8      	ldrb	r0, [r7, #7]
 8001048:	2300      	movs	r3, #0
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2300      	movs	r3, #0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	2211      	movs	r2, #17
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <L6470_HardHiZ+0x38>)
 8001056:	f7ff f92b 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800105a:	4907      	ldr	r1, [pc, #28]	@ (8001078 <L6470_HardHiZ+0x3c>)
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <L6470_HardHiZ+0x38>)
 800105e:	f7ff f94b 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001062:	4906      	ldr	r1, [pc, #24]	@ (800107c <L6470_HardHiZ+0x40>)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <L6470_HardHiZ+0x3c>)
 8001066:	f000 fa0b 	bl	8001480 <L6470_DaisyChainCommand>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000380 	.word	0x20000380
 8001078:	200003a0 	.word	0x200003a0
 800107c:	200003a8 	.word	0x200003a8

08001080 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800108a:	79f8      	ldrb	r0, [r7, #7]
 800108c:	2300      	movs	r3, #0
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	2300      	movs	r3, #0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	2212      	movs	r2, #18
 8001098:	490b      	ldr	r1, [pc, #44]	@ (80010c8 <L6470_GetStatus+0x48>)
 800109a:	f7ff f909 	bl	80002b0 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800109e:	490b      	ldr	r1, [pc, #44]	@ (80010cc <L6470_GetStatus+0x4c>)
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <L6470_GetStatus+0x48>)
 80010a2:	f7ff f929 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80010a6:	490a      	ldr	r1, [pc, #40]	@ (80010d0 <L6470_GetStatus+0x50>)
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <L6470_GetStatus+0x4c>)
 80010aa:	f000 f9e9 	bl	8001480 <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2202      	movs	r2, #2
 80010b2:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <L6470_GetStatus+0x50>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fa31 	bl	800151c <L6470_ExtractReturnedData>
 80010ba:	4603      	mov	r3, r0
 80010bc:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 80010be:	89fb      	ldrh	r3, [r7, #14]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000380 	.word	0x20000380
 80010cc:	200003a0 	.word	0x200003a0
 80010d0:	200003a8 	.word	0x200003a8

080010d4 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	603a      	str	r2, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	460b      	mov	r3, r1
 80010e2:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 80010e4:	79ba      	ldrb	r2, [r7, #6]
 80010e6:	79f8      	ldrb	r0, [r7, #7]
 80010e8:	2300      	movs	r3, #0
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	2201      	movs	r2, #1
 80010f4:	4903      	ldr	r1, [pc, #12]	@ (8001104 <L6470_PrepareSetParam+0x30>)
 80010f6:	f7ff f8db 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000380 	.word	0x20000380

08001108 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	79f8      	ldrb	r0, [r7, #7]
 800111c:	2200      	movs	r2, #0
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	2202      	movs	r2, #2
 8001126:	4903      	ldr	r1, [pc, #12]	@ (8001134 <L6470_PrepareGetParam+0x2c>)
 8001128:	f7ff f8c2 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000380 	.word	0x20000380

08001138 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	603a      	str	r2, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	79f8      	ldrb	r0, [r7, #7]
 800114c:	2300      	movs	r3, #0
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	2203      	movs	r2, #3
 8001158:	4903      	ldr	r1, [pc, #12]	@ (8001168 <L6470_PrepareRun+0x30>)
 800115a:	f7ff f8a9 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000380 	.word	0x20000380

0800116c <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af02      	add	r7, sp, #8
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	79f8      	ldrb	r0, [r7, #7]
 8001180:	2200      	movs	r2, #0
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	2204      	movs	r2, #4
 800118a:	4903      	ldr	r1, [pc, #12]	@ (8001198 <L6470_PrepareStepClock+0x2c>)
 800118c:	f7ff f890 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000380 	.word	0x20000380

0800119c <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	603a      	str	r2, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	79f8      	ldrb	r0, [r7, #7]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	2205      	movs	r2, #5
 80011bc:	4903      	ldr	r1, [pc, #12]	@ (80011cc <L6470_PrepareMove+0x30>)
 80011be:	f7ff f877 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000380 	.word	0x20000380

080011d0 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80011dc:	79f8      	ldrb	r0, [r7, #7]
 80011de:	2300      	movs	r3, #0
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2206      	movs	r2, #6
 80011ea:	4903      	ldr	r1, [pc, #12]	@ (80011f8 <L6470_PrepareGoTo+0x28>)
 80011ec:	f7ff f860 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000380 	.word	0x20000380

080011fc <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	460b      	mov	r3, r1
 800120a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800120c:	79ba      	ldrb	r2, [r7, #6]
 800120e:	79f8      	ldrb	r0, [r7, #7]
 8001210:	2300      	movs	r3, #0
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	2207      	movs	r2, #7
 800121c:	4903      	ldr	r1, [pc, #12]	@ (800122c <L6470_PrepareGoToDir+0x30>)
 800121e:	f7ff f847 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000380 	.word	0x20000380

08001230 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af02      	add	r7, sp, #8
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	460b      	mov	r3, r1
 800123e:	71bb      	strb	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8001244:	79b9      	ldrb	r1, [r7, #6]
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	79f8      	ldrb	r0, [r7, #7]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	460b      	mov	r3, r1
 8001252:	2208      	movs	r2, #8
 8001254:	4903      	ldr	r1, [pc, #12]	@ (8001264 <L6470_PrepareGoUntil+0x34>)
 8001256:	f7ff f82b 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000380 	.word	0x20000380

08001268 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af02      	add	r7, sp, #8
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	460b      	mov	r3, r1
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	4613      	mov	r3, r2
 8001278:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800127a:	79ba      	ldrb	r2, [r7, #6]
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	79f8      	ldrb	r0, [r7, #7]
 8001280:	2100      	movs	r1, #0
 8001282:	9101      	str	r1, [sp, #4]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	2209      	movs	r2, #9
 800128a:	4903      	ldr	r1, [pc, #12]	@ (8001298 <L6470_PrepareReleaseSW+0x30>)
 800128c:	f7ff f810 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000380 	.word	0x20000380

0800129c <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80012a6:	79f8      	ldrb	r0, [r7, #7]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	220a      	movs	r2, #10
 80012b4:	4903      	ldr	r1, [pc, #12]	@ (80012c4 <L6470_PrepareGoHome+0x28>)
 80012b6:	f7fe fffb 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000380 	.word	0x20000380

080012c8 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80012d2:	79f8      	ldrb	r0, [r7, #7]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	220b      	movs	r2, #11
 80012e0:	4903      	ldr	r1, [pc, #12]	@ (80012f0 <L6470_PrepareGoMark+0x28>)
 80012e2:	f7fe ffe5 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000380 	.word	0x20000380

080012f4 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80012fe:	79f8      	ldrb	r0, [r7, #7]
 8001300:	2300      	movs	r3, #0
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	220c      	movs	r2, #12
 800130c:	4903      	ldr	r1, [pc, #12]	@ (800131c <L6470_PrepareResetPos+0x28>)
 800130e:	f7fe ffcf 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000380 	.word	0x20000380

08001320 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800132a:	79f8      	ldrb	r0, [r7, #7]
 800132c:	2300      	movs	r3, #0
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	220d      	movs	r2, #13
 8001338:	4903      	ldr	r1, [pc, #12]	@ (8001348 <L6470_PrepareResetDevice+0x28>)
 800133a:	f7fe ffb9 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000380 	.word	0x20000380

0800134c <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8001356:	79f8      	ldrb	r0, [r7, #7]
 8001358:	2300      	movs	r3, #0
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	220e      	movs	r2, #14
 8001364:	4903      	ldr	r1, [pc, #12]	@ (8001374 <L6470_PrepareSoftStop+0x28>)
 8001366:	f7fe ffa3 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000380 	.word	0x20000380

08001378 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af02      	add	r7, sp, #8
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8001382:	79f8      	ldrb	r0, [r7, #7]
 8001384:	2300      	movs	r3, #0
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2300      	movs	r3, #0
 800138e:	220f      	movs	r2, #15
 8001390:	4903      	ldr	r1, [pc, #12]	@ (80013a0 <L6470_PrepareHardStop+0x28>)
 8001392:	f7fe ff8d 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000380 	.word	0x20000380

080013a4 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80013ae:	79f8      	ldrb	r0, [r7, #7]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	2210      	movs	r2, #16
 80013bc:	4903      	ldr	r1, [pc, #12]	@ (80013cc <L6470_PrepareSoftHiZ+0x28>)
 80013be:	f7fe ff77 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000380 	.word	0x20000380

080013d0 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80013da:	79f8      	ldrb	r0, [r7, #7]
 80013dc:	2300      	movs	r3, #0
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	2211      	movs	r2, #17
 80013e8:	4903      	ldr	r1, [pc, #12]	@ (80013f8 <L6470_PrepareHardHiZ+0x28>)
 80013ea:	f7fe ff61 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000380 	.word	0x20000380

080013fc <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af02      	add	r7, sp, #8
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8001406:	79f8      	ldrb	r0, [r7, #7]
 8001408:	2300      	movs	r3, #0
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	2212      	movs	r2, #18
 8001414:	4903      	ldr	r1, [pc, #12]	@ (8001424 <L6470_PrepareGetStatus+0x28>)
 8001416:	f7fe ff4b 	bl	80002b0 <L6470_PrepareAppCmdPkg>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000380 	.word	0x20000380

08001428 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800142c:	4905      	ldr	r1, [pc, #20]	@ (8001444 <L6470_PerformPreparedApplicationCommand+0x1c>)
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <L6470_PerformPreparedApplicationCommand+0x20>)
 8001430:	f7fe ff62 	bl	80002f8 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001434:	4905      	ldr	r1, [pc, #20]	@ (800144c <L6470_PerformPreparedApplicationCommand+0x24>)
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <L6470_PerformPreparedApplicationCommand+0x1c>)
 8001438:	f000 f822 	bl	8001480 <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <L6470_PerformPreparedApplicationCommand+0x24>)
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200003a0 	.word	0x200003a0
 8001448:	20000380 	.word	0x20000380
 800144c:	200003a8 	.word	0x200003a8

08001450 <L6470_ID>:
  *
  * @note   The position '1' is close the uC MISO.
  * @note   If the position is not allowable the returned value is 0xFF.
  */
uint8_t L6470_ID(uint8_t position)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
   if ((position == 0) || ((position > 0) && (position < L6470DAISYCHAINSIZE)))
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <L6470_ID+0x1c>
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <L6470_ID+0x20>
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d801      	bhi.n	8001470 <L6470_ID+0x20>
  {
    return (position);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	e000      	b.n	8001472 <L6470_ID+0x22>
  }
  else
  {
    return 0xFF;
 8001470:	23ff      	movs	r3, #255	@ 0xff
  }
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <L6470_DaisyChainCommand+0x8c>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e031      	b.n	80014fa <L6470_DaisyChainCommand+0x7a>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <L6470_DaisyChainCommand+0x90>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <L6470_DaisyChainCommand+0x90>)
 800149c:	8911      	ldrh	r1, [r2, #8]
 800149e:	2200      	movs	r2, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fa83 	bl	80039ac <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	1899      	adds	r1, r3, r2
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	461a      	mov	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	441a      	add	r2, r3
 80014ba:	230a      	movs	r3, #10
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2302      	movs	r3, #2
 80014c0:	4814      	ldr	r0, [pc, #80]	@ (8001514 <L6470_DaisyChainCommand+0x94>)
 80014c2:	f003 fa99 	bl	80049f8 <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <L6470_DaisyChainCommand+0x90>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <L6470_DaisyChainCommand+0x90>)
 80014cc:	8911      	ldrh	r1, [r2, #8]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fa6b 	bl	80039ac <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <L6470_DaisyChainCommand+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e006      	b.n	80014ec <L6470_DaisyChainCommand+0x6c>
 80014de:	bf00      	nop
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <L6470_DaisyChainCommand+0x98>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <L6470_DaisyChainCommand+0x98>)
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <L6470_DaisyChainCommand+0x98>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b13      	cmp	r3, #19
 80014f2:	d9f4      	bls.n	80014de <L6470_DaisyChainCommand+0x5e>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	3301      	adds	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d9ca      	bls.n	8001496 <L6470_DaisyChainCommand+0x16>
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200003b0 	.word	0x200003b0
 8001510:	20000404 	.word	0x20000404
 8001514:	20000410 	.word	0x20000410
 8001518:	200003b6 	.word	0x200003b6

0800151c <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8001530:	2301      	movs	r3, #1
 8001532:	72fb      	strb	r3, [r7, #11]
 8001534:	e015      	b.n	8001562 <L6470_ExtractReturnedData+0x46>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	461a      	mov	r2, r3
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4413      	add	r3, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	79ba      	ldrb	r2, [r7, #6]
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	3301      	adds	r3, #1
 8001560:	72fb      	strb	r3, [r7, #11]
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d9e6      	bls.n	8001536 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 8001568:	68fb      	ldr	r3, [r7, #12]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2118      	movs	r1, #24
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fb1f 	bl	8000bd4 <L6470_GetParam>
 8001596:	4602      	mov	r2, r0
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b292      	uxth	r2, r2
 800159e:	801a      	strh	r2, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	2b0e      	cmp	r3, #14
 80015a4:	f200 809a 	bhi.w	80016dc <L6470_CheckStatusRegisterFlag+0x164>
 80015a8:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <L6470_CheckStatusRegisterFlag+0x38>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015ed 	.word	0x080015ed
 80015b4:	080015fd 	.word	0x080015fd
 80015b8:	0800160d 	.word	0x0800160d
 80015bc:	0800161d 	.word	0x0800161d
 80015c0:	0800162d 	.word	0x0800162d
 80015c4:	0800163d 	.word	0x0800163d
 80015c8:	0800164d 	.word	0x0800164d
 80015cc:	0800165d 	.word	0x0800165d
 80015d0:	0800166d 	.word	0x0800166d
 80015d4:	0800167d 	.word	0x0800167d
 80015d8:	0800168d 	.word	0x0800168d
 80015dc:	0800169d 	.word	0x0800169d
 80015e0:	080016ad 	.word	0x080016ad
 80015e4:	080016bd 	.word	0x080016bd
 80015e8:	080016cd 	.word	0x080016cd
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 80015ec:	4b3e      	ldr	r3, [pc, #248]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	73fb      	strb	r3, [r7, #15]
    break;
 80015fa:	e06f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	73fb      	strb	r3, [r7, #15]
    break;
 800160a:	e067      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 800160c:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	73fb      	strb	r3, [r7, #15]
    break;
 800161a:	e05f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 800161c:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	73fb      	strb	r3, [r7, #15]
    break;
 800162a:	e057      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
    break;
 800163a:	e04f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 800163c:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001646:	b2db      	uxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
    break;
 800164a:	e047      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 800164c:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	73fb      	strb	r3, [r7, #15]
    break;
 800165a:	e03f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	73fb      	strb	r3, [r7, #15]
    break;
 800166a:	e037      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 800166c:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	73fb      	strb	r3, [r7, #15]
    break;
 800167a:	e02f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	73fb      	strb	r3, [r7, #15]
    break;
 800168a:	e027      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	73fb      	strb	r3, [r7, #15]
    break;
 800169a:	e01f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	73fb      	strb	r3, [r7, #15]
    break;
 80016aa:	e017      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	73fb      	strb	r3, [r7, #15]
    break;
 80016ba:	e00f      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	785b      	ldrb	r3, [r3, #1]
 80016c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	73fb      	strb	r3, [r7, #15]
    break;
 80016ca:	e007      	b.n	80016dc <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <L6470_CheckStatusRegisterFlag+0x170>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	73fb      	strb	r3, [r7, #15]
    break;
 80016da:	bf00      	nop
  }
  
  return state;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000094 	.word	0x20000094

080016ec <L6470_GetRegisterName>:
/**
  * @brief  Return the mnemonic name for the L6470 register.
  * @param  id  The identifier of the L6470 register.
  */
uint8_t *L6470_GetRegisterName(uint8_t id)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if (id < L6470REGIDSIZE)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b18      	cmp	r3, #24
 80016fa:	d808      	bhi.n	800170e <L6470_GetRegisterName+0x22>
  {
    return (uint8_t*)L6470_Register[id].Name;
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <L6470_GetRegisterName+0x30>)
 8001708:	4413      	add	r3, r2
 800170a:	3301      	adds	r3, #1
 800170c:	e000      	b.n	8001710 <L6470_GetRegisterName+0x24>
  }
  else
  {
    return (uint8_t*)"";
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <L6470_GetRegisterName+0x34>)
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	080061a4 	.word	0x080061a4
 8001720:	08005c28 	.word	0x08005c28

08001724 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	edd3 7a05 	vldr	s15, [r3, #20]
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	f7ff f82c 	bl	8000794 <Step_s2_2_Acc>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	edd3 7a06 	vldr	s15, [r3, #24]
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	f7ff f847 	bl	80007e0 <Step_s2_2_Dec>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	f7ff f862 	bl	800082c <Step_s_2_MaxSpeed>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	edd3 7a08 	vldr	s15, [r3, #32]
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	f7ff f87d 	bl	8000878 <Step_s_2_MinSpeed>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	845a      	strh	r2, [r3, #34]	@ 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	f7ff f898 	bl	80008c4 <Step_s_2_FsSpd>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	849a      	strh	r2, [r3, #36]	@ 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80017a2:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8001a50 <L6470_Config+0x32c>
 80017a6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80017bc:	793b      	ldrb	r3, [r7, #4]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017cc:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001a50 <L6470_Config+0x32c>
 80017d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80017e6:	793b      	ldrb	r3, [r7, #4]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017f6:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001a50 <L6470_Config+0x32c>
 80017fa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001820:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001a50 <L6470_Config+0x32c>
 8001824:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001836:	edc7 7a01 	vstr	s15, [r7, #4]
 800183a:	793b      	ldrb	r3, [r7, #4]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	f7ff f863 	bl	8000918 <Step_s_2_IntSpeed>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	855a      	strh	r2, [r3, #42]	@ 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	f7ff f87e 	bl	8000964 <s_Step_2_StSlp>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f7ff f898 	bl	80009b0 <s_Step_2_FnSlpAcc>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	f7ff f8b2 	bl	80009fc <s_Step_2_FnSlpDec>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	f7ff f8c6 	bl	8000a48 <mA_2_OcdTh>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	f7ff f90a 	bl	8000ae8 <mA_2_StallTh>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	7810      	ldrb	r0, [r2, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	8b92      	ldrh	r2, [r2, #28]
 800190e:	2104      	movs	r1, #4
 8001910:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	7810      	ldrb	r0, [r2, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	8bd2      	ldrh	r2, [r2, #30]
 8001920:	2105      	movs	r1, #5
 8001922:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	7810      	ldrb	r0, [r2, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	8c12      	ldrh	r2, [r2, #32]
 8001932:	2106      	movs	r1, #6
 8001934:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	7810      	ldrb	r0, [r2, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001944:	2107      	movs	r1, #7
 8001946:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	7810      	ldrb	r0, [r2, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8001956:	2108      	movs	r1, #8
 8001958:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	7810      	ldrb	r0, [r2, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 800196a:	2109      	movs	r1, #9
 800196c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	7810      	ldrb	r0, [r2, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 800197e:	210a      	movs	r1, #10
 8001980:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	7810      	ldrb	r0, [r2, #0]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001992:	210b      	movs	r1, #11
 8001994:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	7810      	ldrb	r0, [r2, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80019a6:	210c      	movs	r1, #12
 80019a8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	7810      	ldrb	r0, [r2, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80019b8:	210d      	movs	r1, #13
 80019ba:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	7810      	ldrb	r0, [r2, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80019cc:	210e      	movs	r1, #14
 80019ce:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	7810      	ldrb	r0, [r2, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80019e0:	210f      	movs	r1, #15
 80019e2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	7810      	ldrb	r0, [r2, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80019f4:	2110      	movs	r1, #16
 80019f6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	7810      	ldrb	r0, [r2, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8001a08:	2111      	movs	r1, #17
 8001a0a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	7810      	ldrb	r0, [r2, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 8001a1c:	2113      	movs	r1, #19
 8001a1e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	7810      	ldrb	r0, [r2, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001a30:	2114      	movs	r1, #20
 8001a32:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	7810      	ldrb	r0, [r2, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f892 2033 	ldrb.w	r2, [r2, #51]	@ 0x33
 8001a44:	2115      	movs	r1, #21
 8001a46:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	e001      	b.n	8001a54 <L6470_Config+0x330>
 8001a50:	43800000 	.word	0x43800000
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	7810      	ldrb	r0, [r2, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8001a5e:	2116      	movs	r1, #22
 8001a60:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	7810      	ldrb	r0, [r2, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8001a70:	2117      	movs	r1, #23
 8001a72:	4798      	blx	r3
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <MicrosteppingMotor_Example_01>:
  *			At the end of each movement there is a delay of DELAY_1 ms.
  *			After that all motors for each X-NUCLEO-IHM02A1 will get a HardHiZ
  *			at the same time.
  */
void MicrosteppingMotor_Example_01(void)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
  
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  MotorParameterData_t *MotorParameterDataGlobal, *MotorParameterDataSingle;
  
  #ifdef NUCLEO_USE_USART
  USART_Transmit(&huart2, (uint8_t *)"Initial values for registers:\r\n");
 8001a82:	49a5      	ldr	r1, [pc, #660]	@ (8001d18 <MicrosteppingMotor_Example_01+0x29c>)
 8001a84:	48a5      	ldr	r0, [pc, #660]	@ (8001d1c <MicrosteppingMotor_Example_01+0x2a0>)
 8001a86:	f000 fa35 	bl	8001ef4 <USART_Transmit>
  USART_PrintAllRegisterValues();
 8001a8a:	f000 fb1d 	bl	80020c8 <USART_PrintAllRegisterValues>
  #endif

  /* Setup each X-NUCLEO-IHM02A1 Expansion Board ******************************/
  
  /* Get the parameters for the motor connected with the 1st stepper motor driver of the 1st stepper motor expansion board */
  MotorParameterDataGlobal = GetMotorParameterInitData();
 8001a8e:	f000 fbc3 	bl	8002218 <GetMotorParameterInitData>
 8001a92:	6178      	str	r0, [r7, #20]
  
  for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	773b      	strb	r3, [r7, #28]
 8001a98:	e016      	b.n	8001ac8 <MicrosteppingMotor_Example_01+0x4c>
  {
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(EXPBRD_ID(id));
 8001a9a:	7f3b      	ldrb	r3, [r7, #28]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 f88c 	bl	8002bba <EXPBRD_ID>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 f9bf 	bl	8002e28 <BSP_GetExpansionBoardHandle>
 8001aaa:	61b8      	str	r0, [r7, #24]
    MotorParameterDataSingle = MotorParameterDataGlobal+(id*L6470DAISYCHAINSIZE);
 8001aac:	7f3b      	ldrb	r3, [r7, #28]
 8001aae:	22b0      	movs	r2, #176	@ 0xb0
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    StepperMotorBoardHandle->Config(MotorParameterDataSingle);
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	4798      	blx	r3
  for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
 8001ac2:	7f3b      	ldrb	r3, [r7, #28]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	773b      	strb	r3, [r7, #28]
 8001ac8:	7f3b      	ldrb	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0e5      	beq.n	8001a9a <MicrosteppingMotor_Example_01+0x1e>
  }
  
  #ifdef NUCLEO_USE_USART
  USART_Transmit(&huart2, (uint8_t *)"Custom values for registers:\r\n");
 8001ace:	4994      	ldr	r1, [pc, #592]	@ (8001d20 <MicrosteppingMotor_Example_01+0x2a4>)
 8001ad0:	4892      	ldr	r0, [pc, #584]	@ (8001d1c <MicrosteppingMotor_Example_01+0x2a0>)
 8001ad2:	f000 fa0f 	bl	8001ef4 <USART_Transmit>
  USART_PrintAllRegisterValues();
 8001ad6:	f000 faf7 	bl	80020c8 <USART_PrintAllRegisterValues>
  #endif
  
  /****************************************************************************/
  
  MovementPerRevolution = MPR_1;
 8001ada:	2304      	movs	r3, #4
 8001adc:	74fb      	strb	r3, [r7, #19]
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f001 f86b 	bl	8002bba <EXPBRD_ID>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	77bb      	strb	r3, [r7, #30]
 8001ae8:	e059      	b.n	8001b9e <MicrosteppingMotor_Example_01+0x122>
  {
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 8001aea:	7fbb      	ldrb	r3, [r7, #30]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 f99b 	bl	8002e28 <BSP_GetExpansionBoardHandle>
 8001af2:	61b8      	str	r0, [r7, #24]
    
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fcab 	bl	8001450 <L6470_ID>
 8001afa:	4603      	mov	r3, r0
 8001afc:	777b      	strb	r3, [r7, #29]
 8001afe:	e043      	b.n	8001b88 <MicrosteppingMotor_Example_01+0x10c>
    {
      /* Get the parameters for the motor connected with the actual stepper motor driver of the actual stepper motor expansion board */
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 8001b00:	7fbb      	ldrb	r3, [r7, #30]
 8001b02:	005a      	lsls	r2, r3, #1
 8001b04:	7f7b      	ldrb	r3, [r7, #29]
 8001b06:	4413      	add	r3, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2358      	movs	r3, #88	@ 0x58
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
      Step = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	ee17 4a90 	vmov	r4, s15
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f000 f967 	bl	8001e00 <usrPow>
 8001b32:	4603      	mov	r3, r0
 8001b34:	fb03 f204 	mul.w	r2, r3, r4
 8001b38:	7cfb      	ldrb	r3, [r7, #19]
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	60bb      	str	r3, [r7, #8]
      
      for (i=0; i<MovementPerRevolution; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
 8001b44:	e019      	b.n	8001b7a <MicrosteppingMotor_Example_01+0xfe>
      {
        StepperMotorBoardHandle->Command->Move(board, device, L6470_DIR_FWD_ID, Step);
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	691c      	ldr	r4, [r3, #16]
 8001b4c:	7f79      	ldrb	r1, [r7, #29]
 8001b4e:	7fb8      	ldrb	r0, [r7, #30]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2201      	movs	r2, #1
 8001b54:	47a0      	blx	r4
        while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
 8001b56:	bf00      	nop
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	7f79      	ldrb	r1, [r7, #29]
 8001b60:	7fb8      	ldrb	r0, [r7, #30]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4798      	blx	r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f5      	beq.n	8001b58 <MicrosteppingMotor_Example_01+0xdc>
        HAL_Delay(DELAY_1);
 8001b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b70:	f001 fb60 	bl	8003234 <HAL_Delay>
      for (i=0; i<MovementPerRevolution; i++)
 8001b74:	7ffb      	ldrb	r3, [r7, #31]
 8001b76:	3301      	adds	r3, #1
 8001b78:	77fb      	strb	r3, [r7, #31]
 8001b7a:	7ffa      	ldrb	r2, [r7, #31]
 8001b7c:	7cfb      	ldrb	r3, [r7, #19]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3e1      	bcc.n	8001b46 <MicrosteppingMotor_Example_01+0xca>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001b82:	7f7b      	ldrb	r3, [r7, #29]
 8001b84:	3301      	adds	r3, #1
 8001b86:	777b      	strb	r3, [r7, #29]
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff fc61 	bl	8001450 <L6470_ID>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	7f7b      	ldrb	r3, [r7, #29]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d9b3      	bls.n	8001b00 <MicrosteppingMotor_Example_01+0x84>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001b98:	7fbb      	ldrb	r3, [r7, #30]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	77bb      	strb	r3, [r7, #30]
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f001 f80b 	bl	8002bba <EXPBRD_ID>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	7fbb      	ldrb	r3, [r7, #30]
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d99d      	bls.n	8001aea <MicrosteppingMotor_Example_01+0x6e>
      }
    }
  }
  
  HAL_Delay(DELAY_2);
 8001bae:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001bb2:	f001 fb3f 	bl	8003234 <HAL_Delay>
  
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 ffff 	bl	8002bba <EXPBRD_ID>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	77bb      	strb	r3, [r7, #30]
 8001bc0:	e036      	b.n	8001c30 <MicrosteppingMotor_Example_01+0x1b4>
  {
    
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fc44 	bl	8001450 <L6470_ID>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	777b      	strb	r3, [r7, #29]
 8001bcc:	e021      	b.n	8001c12 <MicrosteppingMotor_Example_01+0x196>
    {
      /* Get the parameters for the motor connected with the actual stepper motor driver of the actual stepper motor expansion board */
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 8001bce:	7fbb      	ldrb	r3, [r7, #30]
 8001bd0:	005a      	lsls	r2, r3, #1
 8001bd2:	7f7b      	ldrb	r3, [r7, #29]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2358      	movs	r3, #88	@ 0x58
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4413      	add	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
      
      /* Set Speed */
      Speed = Step_s_2_Speed(MotorParameterDataSingle->speed);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	f7fe fdad 	bl	800074c <Step_s_2_Speed>
 8001bf2:	6078      	str	r0, [r7, #4]
      
      /* Prepare the stepper driver to be ready to perform a command */
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareRun(device, L6470_DIR_FWD_ID, Speed);
 8001bf4:	7f7b      	ldrb	r3, [r7, #29]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c04:	7f78      	ldrb	r0, [r7, #29]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4798      	blx	r3
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001c0c:	7f7b      	ldrb	r3, [r7, #29]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	777b      	strb	r3, [r7, #29]
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fc1c 	bl	8001450 <L6470_ID>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	7f7b      	ldrb	r3, [r7, #29]
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d9d5      	bls.n	8001bce <MicrosteppingMotor_Example_01+0x152>
    }
    
    StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c28:	4798      	blx	r3
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001c2a:	7fbb      	ldrb	r3, [r7, #30]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	77bb      	strb	r3, [r7, #30]
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 ffc2 	bl	8002bba <EXPBRD_ID>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	7fbb      	ldrb	r3, [r7, #30]
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d9c0      	bls.n	8001bc2 <MicrosteppingMotor_Example_01+0x146>
  }
  
  HAL_Delay(DELAY_3);
 8001c40:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c44:	f001 faf6 	bl	8003234 <HAL_Delay>

  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f000 ffb6 	bl	8002bba <EXPBRD_ID>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	77bb      	strb	r3, [r7, #30]
 8001c52:	e023      	b.n	8001c9c <MicrosteppingMotor_Example_01+0x220>
  {
    
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fbfb 	bl	8001450 <L6470_ID>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	777b      	strb	r3, [r7, #29]
 8001c5e:	e00e      	b.n	8001c7e <MicrosteppingMotor_Example_01+0x202>
    {
      /* Prepare the stepper driver to be ready to perform a command */
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardStop(device);
 8001c60:	7f7b      	ldrb	r3, [r7, #29]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	3302      	adds	r3, #2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c72:	7f7a      	ldrb	r2, [r7, #29]
 8001c74:	4610      	mov	r0, r2
 8001c76:	4798      	blx	r3
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001c78:	7f7b      	ldrb	r3, [r7, #29]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	777b      	strb	r3, [r7, #29]
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7ff fbe6 	bl	8001450 <L6470_ID>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	7f7b      	ldrb	r3, [r7, #29]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d9e8      	bls.n	8001c60 <MicrosteppingMotor_Example_01+0x1e4>
    }
    
    StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	4798      	blx	r3
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001c96:	7fbb      	ldrb	r3, [r7, #30]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	77bb      	strb	r3, [r7, #30]
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 ff8c 	bl	8002bba <EXPBRD_ID>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	7fbb      	ldrb	r3, [r7, #30]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d9d3      	bls.n	8001c54 <MicrosteppingMotor_Example_01+0x1d8>
  }

  MovementPerRevolution = MPR_2;
 8001cac:	2308      	movs	r3, #8
 8001cae:	74fb      	strb	r3, [r7, #19]
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 ff82 	bl	8002bba <EXPBRD_ID>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	77bb      	strb	r3, [r7, #30]
 8001cba:	e05f      	b.n	8001d7c <MicrosteppingMotor_Example_01+0x300>
  {
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 8001cbc:	7fbb      	ldrb	r3, [r7, #30]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 f8b2 	bl	8002e28 <BSP_GetExpansionBoardHandle>
 8001cc4:	61b8      	str	r0, [r7, #24]
    
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fbc2 	bl	8001450 <L6470_ID>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	777b      	strb	r3, [r7, #29]
 8001cd0:	e049      	b.n	8001d66 <MicrosteppingMotor_Example_01+0x2ea>
    {
      /* Get the parameters for the motor connected with the actual stepper motor driver of the actual stepper motor expansion board */
      MotorParameterDataSingle = MotorParameterDataGlobal+((board*L6470DAISYCHAINSIZE)+device);
 8001cd2:	7fbb      	ldrb	r3, [r7, #30]
 8001cd4:	005a      	lsls	r2, r3, #1
 8001cd6:	7f7b      	ldrb	r3, [r7, #29]
 8001cd8:	4413      	add	r3, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2358      	movs	r3, #88	@ 0x58
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
      Step = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf2:	ee17 4a90 	vmov	r4, s15
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f000 f87e 	bl	8001e00 <usrPow>
 8001d04:	4603      	mov	r3, r0
 8001d06:	fb03 f204 	mul.w	r2, r3, r4
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	60bb      	str	r3, [r7, #8]
      
      for (i=0; i<MovementPerRevolution; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	77fb      	strb	r3, [r7, #31]
 8001d16:	e01f      	b.n	8001d58 <MicrosteppingMotor_Example_01+0x2dc>
 8001d18:	08005c2c 	.word	0x08005c2c
 8001d1c:	200003b8 	.word	0x200003b8
 8001d20:	08005c4c 	.word	0x08005c4c
      {
        StepperMotorBoardHandle->Command->Move(board, device, L6470_DIR_FWD_ID, Step);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	691c      	ldr	r4, [r3, #16]
 8001d2a:	7f79      	ldrb	r1, [r7, #29]
 8001d2c:	7fb8      	ldrb	r0, [r7, #30]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2201      	movs	r2, #1
 8001d32:	47a0      	blx	r4
        while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
 8001d34:	bf00      	nop
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3c:	7f79      	ldrb	r1, [r7, #29]
 8001d3e:	7fb8      	ldrb	r0, [r7, #30]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4798      	blx	r3
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f5      	beq.n	8001d36 <MicrosteppingMotor_Example_01+0x2ba>
        HAL_Delay(DELAY_1);
 8001d4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d4e:	f001 fa71 	bl	8003234 <HAL_Delay>
      for (i=0; i<MovementPerRevolution; i++)
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
 8001d54:	3301      	adds	r3, #1
 8001d56:	77fb      	strb	r3, [r7, #31]
 8001d58:	7ffa      	ldrb	r2, [r7, #31]
 8001d5a:	7cfb      	ldrb	r3, [r7, #19]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3e1      	bcc.n	8001d24 <MicrosteppingMotor_Example_01+0x2a8>
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001d60:	7f7b      	ldrb	r3, [r7, #29]
 8001d62:	3301      	adds	r3, #1
 8001d64:	777b      	strb	r3, [r7, #29]
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff fb72 	bl	8001450 <L6470_ID>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	7f7b      	ldrb	r3, [r7, #29]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d9ad      	bls.n	8001cd2 <MicrosteppingMotor_Example_01+0x256>
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001d76:	7fbb      	ldrb	r3, [r7, #30]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	77bb      	strb	r3, [r7, #30]
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 ff1c 	bl	8002bba <EXPBRD_ID>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	7fbb      	ldrb	r3, [r7, #30]
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d997      	bls.n	8001cbc <MicrosteppingMotor_Example_01+0x240>
      }
    }
  }
  
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 ff14 	bl	8002bba <EXPBRD_ID>
 8001d92:	4603      	mov	r3, r0
 8001d94:	77bb      	strb	r3, [r7, #30]
 8001d96:	e023      	b.n	8001de0 <MicrosteppingMotor_Example_01+0x364>
  {
    
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fb59 	bl	8001450 <L6470_ID>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	777b      	strb	r3, [r7, #29]
 8001da2:	e00e      	b.n	8001dc2 <MicrosteppingMotor_Example_01+0x346>
    {
      /* Prepare the stepper driver to be ready to perform a command */
      StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardHiZ(device);
 8001da4:	7f7b      	ldrb	r3, [r7, #29]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	3302      	adds	r3, #2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db6:	7f7a      	ldrb	r2, [r7, #29]
 8001db8:	4610      	mov	r0, r2
 8001dba:	4798      	blx	r3
    for (device = L6470_ID(0); device <= L6470_ID(L6470DAISYCHAINSIZE-1); device++)
 8001dbc:	7f7b      	ldrb	r3, [r7, #29]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	777b      	strb	r3, [r7, #29]
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fb44 	bl	8001450 <L6470_ID>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	7f7b      	ldrb	r3, [r7, #29]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d9e8      	bls.n	8001da4 <MicrosteppingMotor_Example_01+0x328>
    }
    
    StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd8:	4798      	blx	r3
  for (board = EXPBRD_ID(0); board <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); board++)
 8001dda:	7fbb      	ldrb	r3, [r7, #30]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	77bb      	strb	r3, [r7, #30]
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 feea 	bl	8002bba <EXPBRD_ID>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	7fbb      	ldrb	r3, [r7, #30]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d9d3      	bls.n	8001d98 <MicrosteppingMotor_Example_01+0x31c>
  }
  
  /* Switch on the user LED */
    BSP_LED_On(LED2);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 fb59 	bl	80024a8 <BSP_LED_On>
}
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop

08001e00 <usrPow>:
  * @param  exponent  the exponent
  * @retval power     the result as (base^exponent)
  * @note   There is not OVF control.
  */
uint32_t usrPow(uint8_t base, uint8_t exponent)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  uint32_t power = 1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
  
  for (i=0; i<exponent; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e007      	b.n	8001e2a <usrPow+0x2a>
    power *= base;
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	60bb      	str	r3, [r7, #8]
  for (i=0; i<exponent; i++)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	3301      	adds	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3f3      	bcc.n	8001e1a <usrPow+0x1a>
  
  return power;
 8001e32:	68bb      	ldr	r3, [r7, #8]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_EXTI_Callback+0x22>
 8001e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e56:	dc0d      	bgt.n	8001e74 <HAL_GPIO_EXTI_Callback+0x34>
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_EXTI_Callback+0x28>
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_EXTI_Callback+0x2e>
    break;
  case L6470_nFLAG_GPIO_PIN:
    BSP_L6470_FlagEventManager();
    break;
  }
}
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_EXTI_Callback+0x34>
    BSP_EmergencyStop();
 8001e62:	f000 ff13 	bl	8002c8c <BSP_EmergencyStop>
    break;
 8001e66:	e005      	b.n	8001e74 <HAL_GPIO_EXTI_Callback+0x34>
    BSP_L6470_BusySynchEventManager();
 8001e68:	f000 ff00 	bl	8002c6c <BSP_L6470_BusySynchEventManager>
    break;
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_EXTI_Callback+0x34>
    BSP_L6470_FlagEventManager();
 8001e6e:	f000 ff05 	bl	8002c7c <BSP_L6470_FlagEventManager>
    break;
 8001e72:	bf00      	nop
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <USART_TxWelcomeMessage>:

/**
 * @brief  Transmit the initial message to the PC which is connected to the
 *         NUCLEO board via UART.
 */
void USART_TxWelcomeMessage(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	/* Send information to PC via USART */
	USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8001e80:	4912      	ldr	r1, [pc, #72]	@ (8001ecc <USART_TxWelcomeMessage+0x50>)
 8001e82:	4813      	ldr	r0, [pc, #76]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001e84:	f000 f836 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-NUCLEO-IHM02A1\r\n");
 8001e88:	4912      	ldr	r1, [pc, #72]	@ (8001ed4 <USART_TxWelcomeMessage+0x58>)
 8001e8a:	4811      	ldr	r0, [pc, #68]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001e8c:	f000 f832 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" -------------------------------------------\r\n");
 8001e90:	4911      	ldr	r1, [pc, #68]	@ (8001ed8 <USART_TxWelcomeMessage+0x5c>)
 8001e92:	480f      	ldr	r0, [pc, #60]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001e94:	f000 f82e 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Dual L6470 Expansion Board for STM32 NUCLEO\r\n");
 8001e98:	4910      	ldr	r1, [pc, #64]	@ (8001edc <USART_TxWelcomeMessage+0x60>)
 8001e9a:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001e9c:	f000 f82a 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" Stacked on ");
 8001ea0:	490f      	ldr	r1, [pc, #60]	@ (8001ee0 <USART_TxWelcomeMessage+0x64>)
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001ea4:	f000 f826 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, NUCLEO_BOARD_NAME);
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <USART_TxWelcomeMessage+0x68>)
 8001eaa:	4809      	ldr	r0, [pc, #36]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001eac:	f000 f822 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" \r\n");
 8001eb0:	490d      	ldr	r1, [pc, #52]	@ (8001ee8 <USART_TxWelcomeMessage+0x6c>)
 8001eb2:	4807      	ldr	r0, [pc, #28]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001eb4:	f000 f81e 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" X-CUBE-SPN2 v1.1.1\r\n");
 8001eb8:	490c      	ldr	r1, [pc, #48]	@ (8001eec <USART_TxWelcomeMessage+0x70>)
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001ebc:	f000 f81a 	bl	8001ef4 <USART_Transmit>
	USART_Transmit(&huart2, (uint8_t* )" STMicroelectronics, 2015\r\n\r\n");
 8001ec0:	490b      	ldr	r1, [pc, #44]	@ (8001ef0 <USART_TxWelcomeMessage+0x74>)
 8001ec2:	4803      	ldr	r0, [pc, #12]	@ (8001ed0 <USART_TxWelcomeMessage+0x54>)
 8001ec4:	f000 f816 	bl	8001ef4 <USART_Transmit>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	08005ef4 	.word	0x08005ef4
 8001ed0:	200003b8 	.word	0x200003b8
 8001ed4:	08005f34 	.word	0x08005f34
 8001ed8:	08005f48 	.word	0x08005f48
 8001edc:	08005f78 	.word	0x08005f78
 8001ee0:	08005fa8 	.word	0x08005fa8
 8001ee4:	08005fb8 	.word	0x08005fb8
 8001ee8:	08005fc8 	.word	0x08005fc8
 8001eec:	08005fcc 	.word	0x08005fcc
 8001ef0:	08005fe4 	.word	0x08005fe4

08001ef4 <USART_Transmit>:
 * @param  huart       pointer to a UART_HandleTypeDef structure that contains
 *                     the configuration information for the specified UART module.
 * @param  TextString  The text string to be sent.
 * @note It use the HAL_UART_Transmit function.
 */
void USART_Transmit(UART_HandleTypeDef* huart, uint8_t* TextString) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	uint8_t TextStringLength;

	/* Calculate the length of the text string to be sent */
	TextStringLength = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
	while (TextString[TextStringLength++] != '\0')
 8001f02:	bf00      	nop
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	73fa      	strb	r2, [r7, #15]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f6      	bne.n	8001f04 <USART_Transmit+0x10>
		;
	TextStringLength--;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]

	/* Use the HAL function to send the text string via USART */
	HAL_UART_Transmit(huart, TextString, TextStringLength, 10);
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	230a      	movs	r3, #10
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f003 f921 	bl	800516c <HAL_UART_Transmit>
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <USART_ITCharManager>:
 * @brief  Handle text character just received.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module.
 * @note To use inside USART2_IRQHandler function.
 */
void USART_ITCharManager(UART_HandleTypeDef* huart) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	uint8_t UART_Receive_IT_Char;

	UART_Receive_IT_Char = (uint8_t) (huart->Instance->USART_DATA_REGISTER);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
	/* Checks the buffer full or retur carriage  */
	if ((huart->RxXferCount == 1) || (UART_Receive_IT_Char == '\r')) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d002      	beq.n	8001f52 <USART_ITCharManager+0x1e>
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b0d      	cmp	r3, #13
 8001f50:	d141      	bne.n	8001fd6 <USART_ITCharManager+0xa2>
		huart->RxXferCount += 1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f56:	3301      	adds	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
		huart->pRxBuffPtr -= 1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	@ 0x28
		*(huart->pRxBuffPtr) = '\0';
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]

		USART_Transmit(huart, (uint8_t *)"\r\n");
 8001f70:	491b      	ldr	r1, [pc, #108]	@ (8001fe0 <USART_ITCharManager+0xac>)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffbe 	bl	8001ef4 <USART_Transmit>

		while (HAL_IS_BIT_SET(huart->Instance->USART_STATUS_REGISTER,
 8001f78:	bf00      	nop
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f8      	bne.n	8001f7a <USART_ITCharManager+0x46>
				UART_FLAG_RXNE)) {
		}
		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0220 	bic.w	r2, r2, #32
 8001f96:	60da      	str	r2, [r3, #12]

		/* Check if a transmit process is ongoing or not */
		if (huart->State == HAL_UART_STATE_BUSY_TX_RX) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b32      	cmp	r3, #50	@ 0x32
 8001fa2:	d104      	bne.n	8001fae <USART_ITCharManager+0x7a>
			huart->State = HAL_UART_STATE_BUSY_TX;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2212      	movs	r2, #18
 8001fa8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

			huart->State = HAL_UART_STATE_READY;
		}
	}
}
 8001fac:	e013      	b.n	8001fd6 <USART_ITCharManager+0xa2>
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fbc:	60da      	str	r2, [r3, #12]
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
			huart->State = HAL_UART_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	08005ef4 	.word	0x08005ef4

08001fe4 <USART_PrintRegisterValues>:
 * @brief  Print on the PC screen the values of the L6470 Registers.
 * @param  ExpBrd    The addressed Expansion Board
 * @param  L6470_Id  The addressed L6470
 *         
 */
void USART_PrintRegisterValues(uint8_t ExpBrd, uint8_t L6470_Id) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	460a      	mov	r2, r1
 8001fee:	71fb      	strb	r3, [r7, #7]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t r;
	uint32_t value;

	/* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
	if (BSP_Select(ExpBrd)) {
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fdf0 	bl	8002bdc <BSP_Select>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d051      	beq.n	80020a6 <USART_PrintRegisterValues+0xc2>
		USART_Transmit(&huart2, (uint8_t* )"\r\n");
 8002002:	492b      	ldr	r1, [pc, #172]	@ (80020b0 <USART_PrintRegisterValues+0xcc>)
 8002004:	482b      	ldr	r0, [pc, #172]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 8002006:	f7ff ff75 	bl	8001ef4 <USART_Transmit>

		USART_Transmit(&huart2, (uint8_t* )"Values of the registers of L6470_#");
 800200a:	492b      	ldr	r1, [pc, #172]	@ (80020b8 <USART_PrintRegisterValues+0xd4>)
 800200c:	4829      	ldr	r0, [pc, #164]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 800200e:	f7ff ff71 	bl	8001ef4 <USART_Transmit>
		USART_Transmit(&huart2, num2hex(L6470_Id, HALFBYTE_F));
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f886 	bl	8002128 <num2hex>
 800201c:	4603      	mov	r3, r0
 800201e:	4619      	mov	r1, r3
 8002020:	4824      	ldr	r0, [pc, #144]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 8002022:	f7ff ff67 	bl	8001ef4 <USART_Transmit>
		USART_Transmit(&huart2, (uint8_t* )" of ExpBrd_#");
 8002026:	4925      	ldr	r1, [pc, #148]	@ (80020bc <USART_PrintRegisterValues+0xd8>)
 8002028:	4822      	ldr	r0, [pc, #136]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 800202a:	f7ff ff63 	bl	8001ef4 <USART_Transmit>
		USART_Transmit(&huart2, num2hex(ExpBrd, HALFBYTE_F));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f878 	bl	8002128 <num2hex>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	481d      	ldr	r0, [pc, #116]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 800203e:	f7ff ff59 	bl	8001ef4 <USART_Transmit>
		USART_Transmit(&huart2, (uint8_t* )"\r\n\r\n");
 8002042:	491f      	ldr	r1, [pc, #124]	@ (80020c0 <USART_PrintRegisterValues+0xdc>)
 8002044:	481b      	ldr	r0, [pc, #108]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 8002046:	f7ff ff55 	bl	8001ef4 <USART_Transmit>

		for (r = 0; r < L6470REGIDSIZE; r++) {
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e023      	b.n	8002098 <USART_PrintRegisterValues+0xb4>
			value = L6470_GetParam(L6470_Id, (eL6470_RegId_t) r);
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fdbc 	bl	8000bd4 <L6470_GetParam>
 800205c:	60b8      	str	r0, [r7, #8]

			USART_Transmit(&huart2, L6470_GetRegisterName((eL6470_RegId_t) r));
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fb43 	bl	80016ec <L6470_GetRegisterName>
 8002066:	4603      	mov	r3, r0
 8002068:	4619      	mov	r1, r3
 800206a:	4812      	ldr	r0, [pc, #72]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 800206c:	f7ff ff42 	bl	8001ef4 <USART_Transmit>
			USART_Transmit(&huart2, (uint8_t* )": ");
 8002070:	4914      	ldr	r1, [pc, #80]	@ (80020c4 <USART_PrintRegisterValues+0xe0>)
 8002072:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 8002074:	f7ff ff3e 	bl	8001ef4 <USART_Transmit>
			USART_Transmit(&huart2, num2hex(value, DOUBLEWORD_F));
 8002078:	2103      	movs	r1, #3
 800207a:	68b8      	ldr	r0, [r7, #8]
 800207c:	f000 f854 	bl	8002128 <num2hex>
 8002080:	4603      	mov	r3, r0
 8002082:	4619      	mov	r1, r3
 8002084:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 8002086:	f7ff ff35 	bl	8001ef4 <USART_Transmit>
			USART_Transmit(&huart2, (uint8_t* )"\r\n");
 800208a:	4909      	ldr	r1, [pc, #36]	@ (80020b0 <USART_PrintRegisterValues+0xcc>)
 800208c:	4809      	ldr	r0, [pc, #36]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 800208e:	f7ff ff31 	bl	8001ef4 <USART_Transmit>
		for (r = 0; r < L6470REGIDSIZE; r++) {
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b18      	cmp	r3, #24
 800209c:	d9d8      	bls.n	8002050 <USART_PrintRegisterValues+0x6c>
		}

		USART_Transmit(&huart2, (uint8_t* )"\r\n");
 800209e:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <USART_PrintRegisterValues+0xcc>)
 80020a0:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <USART_PrintRegisterValues+0xd0>)
 80020a2:	f7ff ff27 	bl	8001ef4 <USART_Transmit>
	}
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	08005ef4 	.word	0x08005ef4
 80020b4:	200003b8 	.word	0x200003b8
 80020b8:	08006004 	.word	0x08006004
 80020bc:	08006028 	.word	0x08006028
 80020c0:	08006038 	.word	0x08006038
 80020c4:	08006040 	.word	0x08006040

080020c8 <USART_PrintAllRegisterValues>:

/**
 * @brief  Print on the PC screen the values of the L6470 Registers for all
 *         devices mounted on all stacked X-NUCLEO-IHM02A1.
 */
void USART_PrintAllRegisterValues(void) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
	uint8_t ExpBrd; /* to index the expansion board to be addressed */
	uint8_t L6470_Id; /* to index the L6470 into the daisy chain to be addressed */

	for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR - 1);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 fd73 	bl	8002bba <EXPBRD_ID>
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	e019      	b.n	800210e <USART_PrintAllRegisterValues+0x46>
			ExpBrd++) {
		for (L6470_Id = L6470_ID(0);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff f9b8 	bl	8001450 <L6470_ID>
 80020e0:	4603      	mov	r3, r0
 80020e2:	71bb      	strb	r3, [r7, #6]
 80020e4:	e008      	b.n	80020f8 <USART_PrintAllRegisterValues+0x30>
				L6470_Id <= L6470_ID(L6470DAISYCHAINSIZE - 1); L6470_Id++) {
			USART_PrintRegisterValues(ExpBrd, L6470_Id);
 80020e6:	79ba      	ldrb	r2, [r7, #6]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff79 	bl	8001fe4 <USART_PrintRegisterValues>
				L6470_Id <= L6470_ID(L6470DAISYCHAINSIZE - 1); L6470_Id++) {
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	3301      	adds	r3, #1
 80020f6:	71bb      	strb	r3, [r7, #6]
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff f9a9 	bl	8001450 <L6470_ID>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	4293      	cmp	r3, r2
 8002106:	d9ee      	bls.n	80020e6 <USART_PrintAllRegisterValues+0x1e>
			ExpBrd++) {
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	3301      	adds	r3, #1
 800210c:	71fb      	strb	r3, [r7, #7]
	for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR - 1);
 800210e:	2000      	movs	r0, #0
 8002110:	f000 fd53 	bl	8002bba <EXPBRD_ID>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4293      	cmp	r3, r2
 800211c:	d9dd      	bls.n	80020da <USART_PrintAllRegisterValues+0x12>
		}
	}
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <num2hex>:
 * @param  num         The integer number to convert.
 * @param  HexFormat   The output format about hexadecimal number.
 *
 * @retval uint8_t*    The address of the string text for the converted hexadecimal number.
 */
uint8_t* num2hex(uint32_t num, eHexFormat HexFormat) {
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	static uint8_t HexValue[8 + 1];
	uint8_t i;
	uint8_t dummy;
	uint8_t HexDigits = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	73bb      	strb	r3, [r7, #14]

	switch (HexFormat) {
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d816      	bhi.n	800216c <num2hex+0x44>
 800213e:	a201      	add	r2, pc, #4	@ (adr r2, 8002144 <num2hex+0x1c>)
 8002140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002144:	08002155 	.word	0x08002155
 8002148:	0800215b 	.word	0x0800215b
 800214c:	08002161 	.word	0x08002161
 8002150:	08002167 	.word	0x08002167
	case HALFBYTE_F:
		HexDigits = 1;
 8002154:	2301      	movs	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]
		break;
 8002158:	e008      	b.n	800216c <num2hex+0x44>
	case BYTE_F:
		HexDigits = 2;
 800215a:	2302      	movs	r3, #2
 800215c:	73bb      	strb	r3, [r7, #14]
		break;
 800215e:	e005      	b.n	800216c <num2hex+0x44>
	case WORD_F:
		HexDigits = 4;
 8002160:	2304      	movs	r3, #4
 8002162:	73bb      	strb	r3, [r7, #14]
		break;
 8002164:	e002      	b.n	800216c <num2hex+0x44>
	case DOUBLEWORD_F:
		HexDigits = 8;
 8002166:	2308      	movs	r3, #8
 8002168:	73bb      	strb	r3, [r7, #14]
		break;
 800216a:	bf00      	nop
	}

	for (i = 0; i < HexDigits; i++) {
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e029      	b.n	80021c6 <num2hex+0x9e>
		HexValue[i] = '\0';
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	4a1b      	ldr	r2, [pc, #108]	@ (80021e4 <num2hex+0xbc>)
 8002176:	2100      	movs	r1, #0
 8002178:	54d1      	strb	r1, [r2, r3]
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	401a      	ands	r2, r3
				>> (((HexDigits - 1) - i) * 4);
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	1e59      	subs	r1, r3, #1
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	1acb      	subs	r3, r1, r3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
		dummy = (num & (0x0F << (((HexDigits - 1) - i) * 4)))
 800219e:	737b      	strb	r3, [r7, #13]
		if (dummy < 0x0A) {
 80021a0:	7b7b      	ldrb	r3, [r7, #13]
 80021a2:	2b09      	cmp	r3, #9
 80021a4:	d806      	bhi.n	80021b4 <num2hex+0x8c>
			HexValue[i] = dummy + '0';
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	7b7a      	ldrb	r2, [r7, #13]
 80021aa:	3230      	adds	r2, #48	@ 0x30
 80021ac:	b2d1      	uxtb	r1, r2
 80021ae:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <num2hex+0xbc>)
 80021b0:	54d1      	strb	r1, [r2, r3]
 80021b2:	e005      	b.n	80021c0 <num2hex+0x98>
		} else {
			HexValue[i] = (dummy - 0x0A) + 'A';
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	7b7a      	ldrb	r2, [r7, #13]
 80021b8:	3237      	adds	r2, #55	@ 0x37
 80021ba:	b2d1      	uxtb	r1, r2
 80021bc:	4a09      	ldr	r2, [pc, #36]	@ (80021e4 <num2hex+0xbc>)
 80021be:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < HexDigits; i++) {
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	3301      	adds	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d3d1      	bcc.n	8002172 <num2hex+0x4a>
		}
	}
	HexValue[i] = '\0';
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <num2hex+0xbc>)
 80021d2:	2100      	movs	r1, #0
 80021d4:	54d1      	strb	r1, [r2, r3]

	return HexValue;
 80021d6:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <num2hex+0xbc>)
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200003f8 	.word	0x200003f8

080021e8 <main>:

/**
  * @brief The FW main module
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* NUCLEO board initialization */
  NUCLEO_Board_Init();
 80021ec:	f000 ff64 	bl	80030b8 <NUCLEO_Board_Init>
  
  /* X-NUCLEO-IHM02A1 initialization */
  BSP_Init();
 80021f0:	f000 fd2a 	bl	8002c48 <BSP_Init>
  
#ifdef NUCLEO_USE_USART
  /* Transmit the initial message to the PC via UART */
  USART_TxWelcomeMessage();
 80021f4:	f7ff fe42 	bl	8001e7c <USART_TxWelcomeMessage>
#endif
  
#if defined (MICROSTEPPING_MOTOR_EXAMPLE)
  /* Perform a batch commands for X-NUCLEO-IHM02A1 */
  MicrosteppingMotor_Example_01();
 80021f8:	f7ff fc40 	bl	8001a7c <MicrosteppingMotor_Example_01>
  
  /* Infinite loop */
  while (1);
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <main+0x14>

08002200 <assert_failed>:
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <GetMotorParameterInitData>:
  * @brief  Return the initial motor parameters.
  * @param  index   The index inside the array of parameters to point the right data.
  * @retval MotorParameterData_t*   The pointer to the data structure of parameters.
  */
MotorParameterData_t *GetMotorParameterInitData(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return (MotorParameterData_t*)(MotorParameterInitData);
 800221c:	4b02      	ldr	r3, [pc, #8]	@ (8002228 <GetMotorParameterInitData+0x10>)
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	080064c4 	.word	0x080064c4

0800222c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002230:	2007      	movs	r0, #7
 8002232:	f001 f90b 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	f04f 30ff 	mov.w	r0, #4294967295
 800223e:	f001 f925 	bl	800348c <HAL_NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_SPI_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	@ 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a3c      	ldr	r2, [pc, #240]	@ (8002348 <HAL_SPI_MspInit+0x100>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d144      	bne.n	80022e4 <HAL_SPI_MspInit+0x9c>
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 800225a:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <HAL_SPI_MspInit+0x104>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a3b      	ldr	r2, [pc, #236]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b39      	ldr	r3, [pc, #228]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]
#ifdef USE_PB3_AS_SCK
    __GPIOB_CLK_ENABLE();
 8002272:	4b36      	ldr	r3, [pc, #216]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a35      	ldr	r2, [pc, #212]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b33      	ldr	r3, [pc, #204]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
#endif
    
    /* Peripheral clock enable */
    __SPI1_CLK_ENABLE();
 800228a:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_SPI_MspInit+0x104>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	4a2f      	ldr	r2, [pc, #188]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002294:	6453      	str	r3, [r2, #68]	@ 0x44
 8002296:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA5/PB3 ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a2:	23c0      	movs	r3, #192	@ 0xc0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022b2:	2305      	movs	r3, #5
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	4824      	ldr	r0, [pc, #144]	@ (8002350 <HAL_SPI_MspInit+0x108>)
 80022be:	f001 f95b 	bl	8003578 <HAL_GPIO_Init>

#ifdef USE_PB3_AS_SCK
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c2:	2308      	movs	r3, #8
 80022c4:	61fb      	str	r3, [r7, #28]
#elif defined (USE_PA5_AS_SCK)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
#endif
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d2:	2305      	movs	r3, #5
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef USE_PB3_AS_SCK
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	481d      	ldr	r0, [pc, #116]	@ (8002354 <HAL_SPI_MspInit+0x10c>)
 80022de:	f001 f94b 	bl	8003578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 80022e2:	e02d      	b.n	8002340 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002358 <HAL_SPI_MspInit+0x110>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d128      	bne.n	8002340 <HAL_SPI_MspInit+0xf8>
    __GPIOB_CLK_ENABLE();
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <HAL_SPI_MspInit+0x104>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_SPI_MspInit+0x104>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_SPI_MspInit+0x104>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    __SPI2_CLK_ENABLE();
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_SPI_MspInit+0x104>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_SPI_MspInit+0x104>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800231e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002330:	2305      	movs	r3, #5
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4806      	ldr	r0, [pc, #24]	@ (8002354 <HAL_SPI_MspInit+0x10c>)
 800233c:	f001 f91c 	bl	8003578 <HAL_GPIO_Init>
}
 8002340:	bf00      	nop
 8002342:	3730      	adds	r7, #48	@ 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40013000 	.word	0x40013000
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40003800 	.word	0x40003800

0800235c <HAL_UART_MspInit>:
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1b      	ldr	r2, [pc, #108]	@ (80023d8 <HAL_UART_MspInit+0x7c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12f      	bne.n	80023ce <HAL_UART_MspInit+0x72>
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_UART_MspInit+0x80>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a1a      	ldr	r2, [pc, #104]	@ (80023dc <HAL_UART_MspInit+0x80>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_UART_MspInit+0x80>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
    
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_UART_MspInit+0x80>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <HAL_UART_MspInit+0x80>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_UART_MspInit+0x80>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800239e:	230c      	movs	r3, #12
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4809      	ldr	r0, [pc, #36]	@ (80023e0 <HAL_UART_MspInit+0x84>)
 80023ba:	f001 f8dd 	bl	8003578 <HAL_GPIO_Init>

  /* System interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2026      	movs	r0, #38	@ 0x26
 80023c4:	f001 f862 	bl	800348c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c8:	2026      	movs	r0, #38	@ 0x26
 80023ca:	f001 f88b 	bl	80034e4 <HAL_NVIC_EnableIRQ>
  }
}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000

080023e4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80023e8:	f000 ff0a 	bl	8003200 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80023ec:	f001 f8b6 	bl	800355c <HAL_SYSTICK_IRQHandler>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI Line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023f8:	2002      	movs	r0, #2
 80023fa:	f001 fb03 	bl	8003a04 <HAL_GPIO_EXTI_IRQHandler>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI Line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002406:	2001      	movs	r0, #1
 8002408:	f001 fafc 	bl	8003a04 <HAL_GPIO_EXTI_IRQHandler>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8002414:	4803      	ldr	r0, [pc, #12]	@ (8002424 <USART2_IRQHandler+0x14>)
 8002416:	f002 ff52 	bl	80052be <HAL_UART_IRQHandler>
  USART_ITCharManager(&huart2);
 800241a:	4802      	ldr	r0, [pc, #8]	@ (8002424 <USART2_IRQHandler+0x14>)
 800241c:	f7ff fd8a 	bl	8001f34 <USART_ITCharManager>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200003b8 	.word	0x200003b8

08002428 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI Line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800242c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002430:	f001 fae8 	bl	8003a04 <HAL_GPIO_EXTI_IRQHandler>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <BSP_LED_Init+0x28>
 8002448:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <BSP_LED_Init+0x68>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	4a14      	ldr	r2, [pc, #80]	@ (80024a0 <BSP_LED_Init+0x68>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6313      	str	r3, [r2, #48]	@ 0x30
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <BSP_LED_Init+0x68>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002460:	2320      	movs	r3, #32
 8002462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002468:	2301      	movs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	4a0c      	ldr	r2, [pc, #48]	@ (80024a4 <BSP_LED_Init+0x6c>)
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	f107 020c 	add.w	r2, r7, #12
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f001 f87a 	bl	8003578 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <BSP_LED_Init+0x6c>)
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	2120      	movs	r1, #32
 800248e:	2200      	movs	r2, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f001 fa8b 	bl	80039ac <HAL_GPIO_WritePin>
}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	20000098 	.word	0x20000098

080024a8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <BSP_LED_On+0x24>)
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	2120      	movs	r1, #32
 80024bc:	2201      	movs	r2, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fa74 	bl	80039ac <HAL_GPIO_WritePin>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000098 	.word	0x20000098

080024d0 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <BSP_LED_Off+0x24>)
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	2120      	movs	r1, #32
 80024e4:	2200      	movs	r2, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 fa60 	bl	80039ac <HAL_GPIO_WritePin>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000098 	.word	0x20000098

080024f8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	4613      	mov	r3, r2
 8002506:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <BSP_PB_Init+0x2e>
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <BSP_PB_Init+0xa4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a22      	ldr	r2, [pc, #136]	@ (800259c <BSP_PB_Init+0xa4>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b20      	ldr	r3, [pc, #128]	@ (800259c <BSP_PB_Init+0xa4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d112      	bne.n	8002552 <BSP_PB_Init+0x5a>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800252c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002530:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002536:	2302      	movs	r3, #2
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800253a:	2302      	movs	r3, #2
 800253c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <BSP_PB_Init+0xa8>)
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	f107 020c 	add.w	r2, r7, #12
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f001 f813 	bl	8003578 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d11c      	bne.n	8002592 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800255c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <BSP_PB_Init+0xac>)
 8002564:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a0d      	ldr	r2, [pc, #52]	@ (80025a0 <BSP_PB_Init+0xa8>)
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	f107 020c 	add.w	r2, r7, #12
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f000 ffff 	bl	8003578 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800257a:	2328      	movs	r3, #40	@ 0x28
 800257c:	b25b      	sxtb	r3, r3
 800257e:	2200      	movs	r2, #0
 8002580:	210f      	movs	r1, #15
 8002582:	4618      	mov	r0, r3
 8002584:	f000 ff82 	bl	800348c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002588:	2328      	movs	r3, #40	@ 0x28
 800258a:	b25b      	sxtb	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f000 ffa9 	bl	80034e4 <HAL_NVIC_EnableIRQ>
  }
}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	2000009c 	.word	0x2000009c
 80025a4:	10210000 	.word	0x10210000

080025a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <SystemInit+0x20>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <SystemInit+0x20>)
 80025b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <BSP_NUCLEO_GPIO_Init>:
  *         - nBUSY_SYNC (Input with IRQ on falling edge)
  *         - nFLAG (Input with IRQ on falling edge)
  *         - one or more nCS (Output Push-Pull)
  */
void BSP_NUCLEO_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t ExpBrd;
  
  /* Initialize X-NUCLEO-IHM02A1 nSTBY_nRST pin */
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 80025d2:	4b46      	ldr	r3, [pc, #280]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 80025d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d6:	4b46      	ldr	r3, [pc, #280]	@ (80026f0 <BSP_NUCLEO_GPIO_Init+0x124>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4944      	ldr	r1, [pc, #272]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	630b      	str	r3, [r1, #48]	@ 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 80025e0:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <BSP_NUCLEO_GPIO_Init+0x124>)
 80025e2:	891b      	ldrh	r3, [r3, #8]
 80025e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025e6:	2311      	movs	r3, #17
 80025e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <BSP_NUCLEO_GPIO_Init+0x124>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	463a      	mov	r2, r7
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 ffbc 	bl	8003578 <HAL_GPIO_Init>
  
  /* Initialize the X-NUCLEO-IHM02A1 nBUSY_SYNC pin */
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 8002600:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 8002602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002604:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <BSP_NUCLEO_GPIO_Init+0x128>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4938      	ldr	r1, [pc, #224]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 800260a:	4313      	orrs	r3, r2
 800260c:	630b      	str	r3, [r1, #48]	@ 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 800260e:	4b39      	ldr	r3, [pc, #228]	@ (80026f4 <BSP_NUCLEO_GPIO_Init+0x128>)
 8002610:	891b      	ldrh	r3, [r3, #8]
 8002612:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002614:	4b38      	ldr	r3, [pc, #224]	@ (80026f8 <BSP_NUCLEO_GPIO_Init+0x12c>)
 8002616:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 800261c:	4b35      	ldr	r3, [pc, #212]	@ (80026f4 <BSP_NUCLEO_GPIO_Init+0x128>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	463a      	mov	r2, r7
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f000 ffa7 	bl	8003578 <HAL_GPIO_Init>

  /* Sets the priority grouping field */
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2006      	movs	r0, #6
 8002630:	f000 ff2c 	bl	800348c <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);

  /* Initialize X-NUCLEO-IHM02A1 nFLAG pin */
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 8002636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002638:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <BSP_NUCLEO_GPIO_Init+0x130>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	492b      	ldr	r1, [pc, #172]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 800263e:	4313      	orrs	r3, r2
 8002640:	630b      	str	r3, [r1, #48]	@ 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 8002642:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <BSP_NUCLEO_GPIO_Init+0x130>)
 8002644:	891b      	ldrh	r3, [r3, #8]
 8002646:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002648:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <BSP_NUCLEO_GPIO_Init+0x12c>)
 800264a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 8002650:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <BSP_NUCLEO_GPIO_Init+0x130>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	463a      	mov	r2, r7
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 ff8d 	bl	8003578 <HAL_GPIO_Init>

  /* Sets the priority grouping field */
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2007      	movs	r0, #7
 8002664:	f000 ff12 	bl	800348c <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
  
  /* Initialize X-NUCLEO-IHM02A1 nCS pin */
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002668:	2000      	movs	r0, #0
 800266a:	f000 faa6 	bl	8002bba <EXPBRD_ID>
 800266e:	4603      	mov	r3, r0
 8002670:	75fb      	strb	r3, [r7, #23]
 8002672:	e02d      	b.n	80026d0 <BSP_NUCLEO_GPIO_Init+0x104>
  {
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 8002674:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 8002676:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002678:	7dfa      	ldrb	r2, [r7, #23]
 800267a:	4821      	ldr	r0, [pc, #132]	@ (8002700 <BSP_NUCLEO_GPIO_Init+0x134>)
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4403      	add	r3, r0
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <BSP_NUCLEO_GPIO_Init+0x120>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 800268e:	7dfa      	ldrb	r2, [r7, #23]
 8002690:	491b      	ldr	r1, [pc, #108]	@ (8002700 <BSP_NUCLEO_GPIO_Init+0x134>)
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	3308      	adds	r3, #8
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 80026ae:	7dfa      	ldrb	r2, [r7, #23]
 80026b0:	4913      	ldr	r1, [pc, #76]	@ (8002700 <BSP_NUCLEO_GPIO_Init+0x134>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3304      	adds	r3, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	463a      	mov	r2, r7
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 ff57 	bl	8003578 <HAL_GPIO_Init>
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	3301      	adds	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
 80026d0:	2000      	movs	r0, #0
 80026d2:	f000 fa72 	bl	8002bba <EXPBRD_ID>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	4293      	cmp	r3, r2
 80026de:	d9c9      	bls.n	8002674 <BSP_NUCLEO_GPIO_Init+0xa8>
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	20000334 	.word	0x20000334
 80026f4:	20000340 	.word	0x20000340
 80026f8:	10210000 	.word	0x10210000
 80026fc:	2000034c 	.word	0x2000034c
 8002700:	20000358 	.word	0x20000358

08002704 <BSP_L6470_Init>:

/**
  * @brief  Initialize the X-NUCLEO-IHM02A1 mounted board and theirs L6470 devices.
  */
void BSP_L6470_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  uint8_t ExpBrd;                     /* to index the expansion board to be addressed */
  uint8_t L6470_Id;                   /* to index the L6470 to be addressed */
  
  /* Disable the L6470 */
  L6470_DISABLE();
 800270a:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <BSP_L6470_Init+0xa8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <BSP_L6470_Init+0xa8>)
 8002710:	8911      	ldrh	r1, [r2, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f949 	bl	80039ac <HAL_GPIO_WritePin>
  
  /* Enable the L6470 */
  L6470_ENABLE();
 800271a:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <BSP_L6470_Init+0xa8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <BSP_L6470_Init+0xa8>)
 8002720:	8911      	ldrh	r1, [r2, #8]
 8002722:	2201      	movs	r2, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f001 f941 	bl	80039ac <HAL_GPIO_WritePin>
  
  /* Initialize all mounted L6470 for each stacked X-NUCLEO-IHM02A1 */
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 800272a:	2000      	movs	r0, #0
 800272c:	f000 fa45 	bl	8002bba <EXPBRD_ID>
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
 8002734:	e027      	b.n	8002786 <BSP_L6470_Init+0x82>
  {
    /* Select the used GPIO for the L6470 nCS mounted on the addressed X-NUCLEO-IHM02A1 */
    BSP_Select(ExpBrd);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fa4f 	bl	8002bdc <BSP_Select>
    
    /* Disable SPI communication for L6470 */
    L6470_nCS_HIGH();
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <BSP_L6470_Init+0xac>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a1b      	ldr	r2, [pc, #108]	@ (80027b0 <BSP_L6470_Init+0xac>)
 8002744:	8911      	ldrh	r1, [r2, #8]
 8002746:	2201      	movs	r2, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f001 f92f 	bl	80039ac <HAL_GPIO_WritePin>
    
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fe7e 	bl	8001450 <L6470_ID>
 8002754:	4603      	mov	r3, r0
 8002756:	71bb      	strb	r3, [r7, #6]
 8002758:	e00a      	b.n	8002770 <BSP_L6470_Init+0x6c>
    {
      /* Reset the devices */
      L6470_ResetDevice(L6470_Id);
 800275a:	79bb      	ldrb	r3, [r7, #6]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fbe5 	bl	8000f2c <L6470_ResetDevice>
      
      /* Reset all Status Register Flags */
      L6470_GetStatus(L6470_Id);
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fc8b 	bl	8001080 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 800276a:	79bb      	ldrb	r3, [r7, #6]
 800276c:	3301      	adds	r3, #1
 800276e:	71bb      	strb	r3, [r7, #6]
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe fe6d 	bl	8001450 <L6470_ID>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	79bb      	ldrb	r3, [r7, #6]
 800277c:	4293      	cmp	r3, r2
 800277e:	d9ec      	bls.n	800275a <BSP_L6470_Init+0x56>
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	3301      	adds	r3, #1
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	2000      	movs	r0, #0
 8002788:	f000 fa17 	bl	8002bba <EXPBRD_ID>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4293      	cmp	r3, r2
 8002794:	d9cf      	bls.n	8002736 <BSP_L6470_Init+0x32>
    }
  }
 
  /* Select the default X-NUCLEO-IHM02A1 to be addressed by SPI */
  BSP_Select(EXPBRD_ID(0));
 8002796:	2000      	movs	r0, #0
 8002798:	f000 fa0f 	bl	8002bba <EXPBRD_ID>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fa1c 	bl	8002bdc <BSP_Select>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000334 	.word	0x20000334
 80027b0:	20000404 	.word	0x20000404

080027b4 <BSP_IRQ>:

/**
  * @brief  Enable the IRQ for the nBUSY_SYNC and the nFLAG of the X-NUCLEO-IHM02A1
  */
void BSP_IRQ(FunctionalState fs)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if(fs == ENABLE)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <BSP_IRQ+0x1e>
  {
    HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);
 80027c4:	2006      	movs	r0, #6
 80027c6:	f000 fe8d 	bl	80034e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
 80027ca:	2007      	movs	r0, #7
 80027cc:	f000 fe8a 	bl	80034e4 <HAL_NVIC_EnableIRQ>
  else
  {
    HAL_NVIC_DisableIRQ(L6470_nBUSY_SYNC_IRQn);
    HAL_NVIC_DisableIRQ(L6470_nFLAG_IRQn);
  }
}
 80027d0:	e005      	b.n	80027de <BSP_IRQ+0x2a>
    HAL_NVIC_DisableIRQ(L6470_nBUSY_SYNC_IRQn);
 80027d2:	2006      	movs	r0, #6
 80027d4:	f000 fe9e 	bl	8003514 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(L6470_nFLAG_IRQn);
 80027d8:	2007      	movs	r0, #7
 80027da:	f000 fe9b 	bl	8003514 <HAL_NVIC_DisableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <BSP_L6470_SetParam>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_RegId     The L6470 Register identifier
  * @param  Value           The new value for the L6470 Register
  */
void BSP_L6470_SetParam(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	460b      	mov	r3, r1
 80027f4:	71bb      	strb	r3, [r7, #6]
 80027f6:	4613      	mov	r3, r2
 80027f8:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f9ed 	bl	8002bdc <BSP_Select>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <BSP_L6470_SetParam+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 8002808:	7979      	ldrb	r1, [r7, #5]
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe f9ba 	bl	8000b88 <L6470_SetParam>
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <BSP_L6470_GetParam>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_RegId     The L6470 Register identifier
  * @retval uint32_t        The value of the L6470 Register
  */
uint32_t BSP_L6470_GetParam(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	460b      	mov	r3, r1
 8002828:	71bb      	strb	r3, [r7, #6]
 800282a:	4613      	mov	r3, r2
 800282c:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f9d3 	bl	8002bdc <BSP_Select>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <BSP_L6470_GetParam+0x30>
  {
    /* Perform the related L6470 Application Command */
    return L6470_GetParam(L6470_Id, L6470_RegId);
 800283c:	797a      	ldrb	r2, [r7, #5]
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe f9c6 	bl	8000bd4 <L6470_GetParam>
 8002848:	4603      	mov	r3, r0
 800284a:	e000      	b.n	800284e <BSP_L6470_GetParam+0x32>
  }
  else
    return 0xFF;
 800284c:	23ff      	movs	r3, #255	@ 0xff
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <BSP_L6470_Run>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  Speed           The new value about the speed
  */
void BSP_L6470_Run(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	460b      	mov	r3, r1
 8002864:	71bb      	strb	r3, [r7, #6]
 8002866:	4613      	mov	r3, r2
 8002868:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f9b5 	bl	8002bdc <BSP_Select>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <BSP_L6470_Run+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 8002878:	7979      	ldrb	r1, [r7, #5]
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f9e0 	bl	8000c44 <L6470_Run>
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <BSP_L6470_StepClock>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  */
void BSP_L6470_StepClock(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
 8002896:	460b      	mov	r3, r1
 8002898:	71bb      	strb	r3, [r7, #6]
 800289a:	4613      	mov	r3, r2
 800289c:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f99b 	bl	8002bdc <BSP_Select>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <BSP_L6470_StepClock+0x2c>
  {
    /* Perform the related L6470 Application Command */
    L6470_StepClock(L6470_Id, L6470_DirId);
 80028ac:	797a      	ldrb	r2, [r7, #5]
 80028ae:	79bb      	ldrb	r3, [r7, #6]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f9ec 	bl	8000c90 <L6470_StepClock>
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <BSP_L6470_Move>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  N_Step          The number of step about the movement to be performed
  */
void BSP_L6470_Move(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
 80028cc:	460b      	mov	r3, r1
 80028ce:	71bb      	strb	r3, [r7, #6]
 80028d0:	4613      	mov	r3, r2
 80028d2:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f980 	bl	8002bdc <BSP_Select>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <BSP_L6470_Move+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 80028e2:	7979      	ldrb	r1, [r7, #5]
 80028e4:	79bb      	ldrb	r3, [r7, #6]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe f9f5 	bl	8000cd8 <L6470_Move>
  }
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <BSP_L6470_GoTo>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  AbsPos          The L6470 absolute position to be reached
  */
void BSP_L6470_GoTo(uint8_t ExpBrd_Id, uint8_t L6470_Id, uint32_t AbsPos)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	603a      	str	r2, [r7, #0]
 8002900:	71fb      	strb	r3, [r7, #7]
 8002902:	460b      	mov	r3, r1
 8002904:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f967 	bl	8002bdc <BSP_Select>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <BSP_L6470_GoTo+0x28>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoTo(L6470_Id, AbsPos);
 8002914:	79bb      	ldrb	r3, [r7, #6]
 8002916:	6839      	ldr	r1, [r7, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fa03 	bl	8000d24 <L6470_GoTo>
  }
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <BSP_L6470_GoToDir>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  AbsPos          The L6470 absolute position to be reached
  */
void BSP_L6470_GoToDir(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
 8002932:	460b      	mov	r3, r1
 8002934:	71bb      	strb	r3, [r7, #6]
 8002936:	4613      	mov	r3, r2
 8002938:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f94d 	bl	8002bdc <BSP_Select>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <BSP_L6470_GoToDir+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 8002948:	7979      	ldrb	r1, [r7, #5]
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fa0e 	bl	8000d70 <L6470_GoToDir>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <BSP_L6470_GoUntil>:
  * @param  L6470_ActId     The L6470 Action identifier about ABS_POS register
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  Speed           The new value about the speed
  */
void BSP_L6470_GoUntil(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4604      	mov	r4, r0
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4623      	mov	r3, r4
 800296c:	71fb      	strb	r3, [r7, #7]
 800296e:	4603      	mov	r3, r0
 8002970:	71bb      	strb	r3, [r7, #6]
 8002972:	460b      	mov	r3, r1
 8002974:	717b      	strb	r3, [r7, #5]
 8002976:	4613      	mov	r3, r2
 8002978:	713b      	strb	r3, [r7, #4]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f92d 	bl	8002bdc <BSP_Select>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <BSP_L6470_GoUntil+0x38>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 8002988:	793a      	ldrb	r2, [r7, #4]
 800298a:	7979      	ldrb	r1, [r7, #5]
 800298c:	79b8      	ldrb	r0, [r7, #6]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f7fe fa18 	bl	8000dc4 <L6470_GoUntil>
  }
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}

0800299c <BSP_L6470_ReleaseSW>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_ActId     The L6470 Action identifier about ABS_POS register
  * @param  L6470_DirId     The L6470 Direction identifier
  */
void BSP_L6470_ReleaseSW(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	71fb      	strb	r3, [r7, #7]
 80029ae:	4603      	mov	r3, r0
 80029b0:	71bb      	strb	r3, [r7, #6]
 80029b2:	460b      	mov	r3, r1
 80029b4:	717b      	strb	r3, [r7, #5]
 80029b6:	4613      	mov	r3, r2
 80029b8:	713b      	strb	r3, [r7, #4]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f90d 	bl	8002bdc <BSP_Select>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <BSP_L6470_ReleaseSW+0x38>
  {
    /* Perform the related L6470 Application Command */
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 80029c8:	793a      	ldrb	r2, [r7, #4]
 80029ca:	7979      	ldrb	r1, [r7, #5]
 80029cc:	79bb      	ldrb	r3, [r7, #6]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fa20 	bl	8000e14 <L6470_ReleaseSW>
  }
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}

080029dc <BSP_L6470_GoHome>:
  * @brief  Perform the L6470_GoHome Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_GoHome(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f8f4 	bl	8002bdc <BSP_Select>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <BSP_L6470_GoHome+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoHome(L6470_Id);
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fa2f 	bl	8000e60 <L6470_GoHome>
  }
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <BSP_L6470_GoMark>:
  * @brief  Perform the L6470_GoMark Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_GoMark(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	460a      	mov	r2, r1
 8002a14:	71fb      	strb	r3, [r7, #7]
 8002a16:	4613      	mov	r3, r2
 8002a18:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f8dd 	bl	8002bdc <BSP_Select>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <BSP_L6470_GoMark+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoMark(L6470_Id);
 8002a28:	79bb      	ldrb	r3, [r7, #6]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fa3a 	bl	8000ea4 <L6470_GoMark>
  }
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <BSP_L6470_ResetPos>:
  * @brief  Perform the L6470_ResetPos Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_ResetPos(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	460a      	mov	r2, r1
 8002a42:	71fb      	strb	r3, [r7, #7]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f8c6 	bl	8002bdc <BSP_Select>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <BSP_L6470_ResetPos+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_ResetPos(L6470_Id);
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fa45 	bl	8000ee8 <L6470_ResetPos>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <BSP_L6470_ResetDevice>:
  * @brief  Perform the L6470_ResetDevice Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_ResetDevice(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	460a      	mov	r2, r1
 8002a70:	71fb      	strb	r3, [r7, #7]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f8af 	bl	8002bdc <BSP_Select>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <BSP_L6470_ResetDevice+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_ResetDevice(L6470_Id);
 8002a84:	79bb      	ldrb	r3, [r7, #6]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fa50 	bl	8000f2c <L6470_ResetDevice>
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <BSP_L6470_SoftStop>:
  * @brief  Perform the L6470_SoftStop Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_SoftStop(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	71fb      	strb	r3, [r7, #7]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f898 	bl	8002bdc <BSP_Select>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <BSP_L6470_SoftStop+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_SoftStop(L6470_Id);
 8002ab2:	79bb      	ldrb	r3, [r7, #6]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fa5b 	bl	8000f70 <L6470_SoftStop>
  }
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <BSP_L6470_HardStop>:
  * @brief  Perform the L6470_HardStop Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_HardStop(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460a      	mov	r2, r1
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f881 	bl	8002bdc <BSP_Select>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <BSP_L6470_HardStop+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_HardStop(L6470_Id);
 8002ae0:	79bb      	ldrb	r3, [r7, #6]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fa66 	bl	8000fb4 <L6470_HardStop>
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <BSP_L6470_SoftHiZ>:
  * @brief  Perform the L6470_SoftHiZ Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_SoftHiZ(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	460a      	mov	r2, r1
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f86a 	bl	8002bdc <BSP_Select>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <BSP_L6470_SoftHiZ+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_SoftHiZ(L6470_Id);
 8002b0e:	79bb      	ldrb	r3, [r7, #6]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fa71 	bl	8000ff8 <L6470_SoftHiZ>
  }
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <BSP_L6470_HardHiZ>:
  * @brief  Perform the L6470_HardHiZ Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_HardHiZ(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	460a      	mov	r2, r1
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f853 	bl	8002bdc <BSP_Select>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <BSP_L6470_HardHiZ+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_HardHiZ(L6470_Id);
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fa7c 	bl	800103c <L6470_HardHiZ>
  }
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <BSP_L6470_GetStatus>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @retval uint16_t        The value of the L6470 Status Register
  */
uint16_t BSP_L6470_GetStatus(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	460a      	mov	r2, r1
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f83c 	bl	8002bdc <BSP_Select>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <BSP_L6470_GetStatus+0x2a>
  {
    /* Perform the related L6470 Application Command */
    return L6470_GetStatus(L6470_Id);
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fa87 	bl	8001080 <L6470_GetStatus>
 8002b72:	4603      	mov	r3, r0
 8002b74:	e000      	b.n	8002b78 <BSP_L6470_GetStatus+0x2c>
  }
  else
    return 0;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <BSP_L6470_CheckStatusRegisterFlag>:
  * @param  L6470_Id                    The L6470 identifier inside the daisy chain
  * @param  L6470_StatusRegisterFlagId  The L6470 Status Register Flag identifier
  * @retval uint8_t                     The actual flag status.
  */
uint8_t BSP_L6470_CheckStatusRegisterFlag(uint8_t ExpBrd_Id, uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	71bb      	strb	r3, [r7, #6]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f821 	bl	8002bdc <BSP_Select>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <BSP_L6470_CheckStatusRegisterFlag+0x30>
  {
    /* Check the flag of the L6470 Register Status related to the device mounted on the addressed X-NUCLEO-IHM02A1 */
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 8002ba0:	797a      	ldrb	r2, [r7, #5]
 8002ba2:	79bb      	ldrb	r3, [r7, #6]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fce6 	bl	8001578 <L6470_CheckStatusRegisterFlag>
 8002bac:	4603      	mov	r3, r0
 8002bae:	e000      	b.n	8002bb2 <BSP_L6470_CheckStatusRegisterFlag+0x32>
  }
  else
    return 0xFF;
 8002bb0:	23ff      	movs	r3, #255	@ 0xff
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <EXPBRD_ID>:
  *
  * @note The first accepted position is '0'.
  * @note If the position is not allowable the returned value is 0xFF.
  */
uint8_t EXPBRD_ID(uint8_t position)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  if (position < EXPBRD_MOUNTED_NR)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <EXPBRD_ID+0x14>
  {
    return (position);
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	e000      	b.n	8002bd0 <EXPBRD_ID+0x16>
  }
  else
  {
    return 0xFF;
 8002bce:	23ff      	movs	r3, #255	@ 0xff
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <BSP_Select>:
  * @brief  Select the used SPI nCS mounted on the addressed X-NUCLEO-IHM02A1.
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d121      	bne.n	8002c30 <BSP_Select+0x54>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 8002bec:	79fa      	ldrb	r2, [r7, #7]
 8002bee:	4914      	ldr	r1, [pc, #80]	@ (8002c40 <BSP_Select+0x64>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <BSP_Select+0x68>)
 8002bfe:	6013      	str	r3, [r2, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 8002c00:	79fa      	ldrb	r2, [r7, #7]
 8002c02:	490f      	ldr	r1, [pc, #60]	@ (8002c40 <BSP_Select+0x64>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a0c      	ldr	r2, [pc, #48]	@ (8002c44 <BSP_Select+0x68>)
 8002c14:	6053      	str	r3, [r2, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 8002c16:	79fa      	ldrb	r2, [r7, #7]
 8002c18:	4909      	ldr	r1, [pc, #36]	@ (8002c40 <BSP_Select+0x64>)
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3308      	adds	r3, #8
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <BSP_Select+0x68>)
 8002c2a:	811a      	strh	r2, [r3, #8]
    return SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <BSP_Select+0x56>
  }
  else
    return RESET;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000358 	.word	0x20000358
 8002c44:	20000404 	.word	0x20000404

08002c48 <BSP_Init>:

/**
  * @brief  X-NUCLEO-IHM02A1 initialization
  */
void BSP_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Select the default L6470_nCS_GPIO */
  BSP_Select(EXPBRD_ID(0));
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7ff ffb4 	bl	8002bba <EXPBRD_ID>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ffc1 	bl	8002bdc <BSP_Select>
  
  /* Initialize the NUCLEO GPIO used by the X-NUCLEO-IHM02A1 */
  BSP_NUCLEO_GPIO_Init();
 8002c5a:	f7ff fcb7 	bl	80025cc <BSP_NUCLEO_GPIO_Init>
  
  /* Initialize the L6470 devices mounted on the X-NUCLEO-IHM02A1 */
  BSP_L6470_Init();
 8002c5e:	f7ff fd51 	bl	8002704 <BSP_L6470_Init>

  /* Enable the IRQ for the nBUSY_SYNC and the nFLAG of the X-NUCLEO-IHM02A1*/
  BSP_IRQ(ENABLE);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff fda6 	bl	80027b4 <BSP_IRQ>
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <BSP_L6470_BusySynchEventManager>:

/**
  * @brief  This function manages the busy-synch event.
  */
void BSP_L6470_BusySynchEventManager(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  __NOP();
 8002c70:	bf00      	nop
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <BSP_L6470_FlagEventManager>:

  /**
  * @brief  This function manages the status flag event.
  */
void BSP_L6470_FlagEventManager(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  __NOP();
 8002c80:	bf00      	nop
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <BSP_EmergencyStop>:

/**
  * @brief  This function will stop all motors connected to all stacked expansion board.
  */
void BSP_EmergencyStop(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Disable the L6470 */
  L6470_DISABLE();
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <BSP_EmergencyStop+0x18>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a03      	ldr	r2, [pc, #12]	@ (8002ca4 <BSP_EmergencyStop+0x18>)
 8002c96:	8911      	ldrh	r1, [r2, #8]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fe86 	bl	80039ac <HAL_GPIO_WritePin>
  
  while(1);
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <BSP_EmergencyStop+0x14>
 8002ca4:	20000334 	.word	0x20000334

08002ca8 <BSP_0_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[0];
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <BSP_0_Config+0x1c>)
 8002cb2:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f8f0 	bl	8002e9c <BSP_Config>
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200002d4 	.word	0x200002d4

08002cc8 <BSP_1_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[1];
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <BSP_1_Config+0x1c>)
 8002cd2:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f8e0 	bl	8002e9c <BSP_Config>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200002ec 	.word	0x200002ec

08002ce8 <BSP_2_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_2_Config(MotorParameterData_t *MotorParameterData)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[2];
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <BSP_2_Config+0x1c>)
 8002cf2:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f8d0 	bl	8002e9c <BSP_Config>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000304 	.word	0x20000304

08002d08 <BSP_3_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_3_Config(MotorParameterData_t *MotorParameterData)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[3];
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <BSP_3_Config+0x1c>)
 8002d12:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8c0 	bl	8002e9c <BSP_Config>
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000031c 	.word	0x2000031c

08002d28 <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <BSP_L6470_0_0_Config+0x1c>)
 8002d32:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7fe fcf4 	bl	8001724 <L6470_Config>
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200000f4 	.word	0x200000f4

08002d48 <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
 8002d50:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <BSP_L6470_0_1_Config+0x1c>)
 8002d52:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7fe fce4 	bl	8001724 <L6470_Config>
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000130 	.word	0x20000130

08002d68 <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <BSP_L6470_1_0_Config+0x1c>)
 8002d72:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f7fe fcd4 	bl	8001724 <L6470_Config>
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000016c 	.word	0x2000016c

08002d88 <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <BSP_L6470_1_1_Config+0x1c>)
 8002d92:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7fe fcc4 	bl	8001724 <L6470_Config>
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200001a8 	.word	0x200001a8

08002da8 <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <BSP_L6470_2_0_Config+0x1c>)
 8002db2:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7fe fcb4 	bl	8001724 <L6470_Config>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200001e4 	.word	0x200001e4

08002dc8 <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <BSP_L6470_2_1_Config+0x1c>)
 8002dd2:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7fe fca4 	bl	8001724 <L6470_Config>
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000220 	.word	0x20000220

08002de8 <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <BSP_L6470_3_0_Config+0x1c>)
 8002df2:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7fe fc94 	bl	8001724 <L6470_Config>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000025c 	.word	0x2000025c

08002e08 <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
 8002e10:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <BSP_L6470_3_1_Config+0x1c>)
 8002e12:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7fe fc84 	bl	8001724 <L6470_Config>
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000298 	.word	0x20000298

08002e28 <BSP_GetExpansionBoardHandle>:
 * @brief Return expansion board handle (pointer to the L6470 motor driver structure)
 * @param id Identifier inside the daisy chain
 * @retval Pointer to the StepperMotorDriverHandle_t structure
 */
StepperMotorBoardHandle_t *BSP_GetExpansionBoardHandle(uint8_t id)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if (id == EXPBRD_ID(0))
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fec1 	bl	8002bba <EXPBRD_ID>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <BSP_GetExpansionBoardHandle+0x1e>
    return (&XNUCLEOIHM02A1Drv[0]);
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <BSP_GetExpansionBoardHandle+0x64>)
 8002e44:	e01e      	b.n	8002e84 <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(1))
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7ff feb7 	bl	8002bba <EXPBRD_ID>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <BSP_GetExpansionBoardHandle+0x32>
    return (&XNUCLEOIHM02A1Drv[1]);
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <BSP_GetExpansionBoardHandle+0x68>)
 8002e58:	e014      	b.n	8002e84 <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(2))
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f7ff fead 	bl	8002bba <EXPBRD_ID>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <BSP_GetExpansionBoardHandle+0x46>
    return (&XNUCLEOIHM02A1Drv[2]);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <BSP_GetExpansionBoardHandle+0x6c>)
 8002e6c:	e00a      	b.n	8002e84 <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(3))
 8002e6e:	2003      	movs	r0, #3
 8002e70:	f7ff fea3 	bl	8002bba <EXPBRD_ID>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <BSP_GetExpansionBoardHandle+0x5a>
    return (&XNUCLEOIHM02A1Drv[3]);
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <BSP_GetExpansionBoardHandle+0x70>)
 8002e80:	e000      	b.n	8002e84 <BSP_GetExpansionBoardHandle+0x5c>
  
  return 0;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200002d4 	.word	0x200002d4
 8002e90:	200002ec 	.word	0x200002ec
 8002e94:	20000304 	.word	0x20000304
 8002e98:	2000031c 	.word	0x2000031c

08002e9c <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	7812      	ldrb	r2, [r2, #0]
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	6838      	ldr	r0, [r7, #0]
 8002eba:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	3258      	adds	r2, #88	@ 0x58
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4798      	blx	r3
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <SystemClock_Config>:
  *         - APB1 Timer Clocks: 84 MHz
  *         - APB2 Peripheral Clocks: 84 MHz
  *         - APB2 Timer Clocks: 84 MHz
  */
void SystemClock_Config(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b094      	sub	sp, #80	@ 0x50
 8002ed8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8002eda:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <SystemClock_Config+0x94>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	4a22      	ldr	r2, [pc, #136]	@ (8002f68 <SystemClock_Config+0x94>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee6:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <SystemClock_Config+0x94>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <SystemClock_Config+0x98>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002efa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <SystemClock_Config+0x98>)
 8002efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <SystemClock_Config+0x98>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f12:	2301      	movs	r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002f16:	2310      	movs	r3, #16
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002f22:	2310      	movs	r3, #16
 8002f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002f26:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f30:	2307      	movs	r3, #7
 8002f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 f90b 	bl	8004154 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8002f3e:	2305      	movs	r3, #5
 8002f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f42:	2302      	movs	r3, #2
 8002f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd6a 	bl	8003a34 <HAL_RCC_ClockConfig>

}
 8002f60:	bf00      	nop
 8002f62:	3750      	adds	r7, #80	@ 0x50
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000

08002f70 <MX_GPIO_Init>:

/**
  * @brief  This function initializes the GPIO MX.
  */
void MX_GPIO_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
#ifdef NUCLEO_USE_USER_BUTTON
  /* Configures Button GPIO and EXTI Line */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8002f74:	2101      	movs	r1, #1
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7ff fabe 	bl	80024f8 <BSP_PB_Init>
#endif

#ifdef NUCLEO_USE_USER_LED
  /* Configures LED GPIO */
  BSP_LED_Init(LED2);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7ff fa5b 	bl	8002438 <BSP_LED_Init>
#endif
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <MX_SPI_Init>:
  *
  * @note   It selects the @ref MX_SPI1_Init or @ref MX_SPI2_Init
  *         related to the defined macro @ref NUCLEO_USE_SPI_1 or @ref NUCLEO_USE_SPI_2.
  */
void MX_SPI_Init(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
#ifdef NUCLEO_USE_SPI_1
  MX_SPI1_Init();
 8002f8a:	f000 f803 	bl	8002f94 <MX_SPI1_Init>
#endif
#ifdef NUCLEO_USE_SPI_2
  MX_SPI2_Init();
#endif
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 8002f9a:	4b32      	ldr	r3, [pc, #200]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002f9c:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <MX_SPI1_Init+0xd4>)
 8002f9e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fa0:	4b30      	ldr	r3, [pc, #192]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fa2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fa6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fae:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fba:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fc0:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fc8:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8002fce:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002fd4:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 8002fda:	f001 f891 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8002fde:	60b8      	str	r0, [r7, #8]
  freq_div = (freq / MAX_BAUDRATE);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	@ (800306c <MX_SPI1_Init+0xd8>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	0d5b      	lsrs	r3, r3, #21
 8002fea:	80fb      	strh	r3, [r7, #6]
  
  if (freq_div < 2)
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d802      	bhi.n	8002ff8 <MX_SPI1_Init+0x64>
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e02a      	b.n	800304e <MX_SPI1_Init+0xba>
  }
  else
  {
    if (freq_div < 4)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d802      	bhi.n	8003004 <MX_SPI1_Init+0x70>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 8002ffe:	2308      	movs	r3, #8
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e024      	b.n	800304e <MX_SPI1_Init+0xba>
    }
    else
    {
      if (freq_div < 8)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	2b07      	cmp	r3, #7
 8003008:	d802      	bhi.n	8003010 <MX_SPI1_Init+0x7c>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 800300a:	2310      	movs	r3, #16
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e01e      	b.n	800304e <MX_SPI1_Init+0xba>
      }
      else
      {
        if (freq_div < 16)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	d802      	bhi.n	800301c <MX_SPI1_Init+0x88>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 8003016:	2318      	movs	r3, #24
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e018      	b.n	800304e <MX_SPI1_Init+0xba>
        }
        else
        {
          if (freq_div < 32)
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	2b1f      	cmp	r3, #31
 8003020:	d802      	bhi.n	8003028 <MX_SPI1_Init+0x94>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8003022:	2320      	movs	r3, #32
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e012      	b.n	800304e <MX_SPI1_Init+0xba>
          }
          else
          {
            if (freq_div < 64)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	2b3f      	cmp	r3, #63	@ 0x3f
 800302c:	d802      	bhi.n	8003034 <MX_SPI1_Init+0xa0>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 800302e:	2328      	movs	r3, #40	@ 0x28
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e00c      	b.n	800304e <MX_SPI1_Init+0xba>
            }
            else
            {
              if (freq_div < 128)
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	2b7f      	cmp	r3, #127	@ 0x7f
 8003038:	d802      	bhi.n	8003040 <MX_SPI1_Init+0xac>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 800303a:	2330      	movs	r3, #48	@ 0x30
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e006      	b.n	800304e <MX_SPI1_Init+0xba>
              }
              else
              {
                if (freq_div < 256)
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2bff      	cmp	r3, #255	@ 0xff
 8003044:	d802      	bhi.n	800304c <MX_SPI1_Init+0xb8>
                {
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 8003046:	2338      	movs	r3, #56	@ 0x38
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e000      	b.n	800304e <MX_SPI1_Init+0xba>
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 800304c:	e7fe      	b.n	800304c <MX_SPI1_Init+0xb8>
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	61d3      	str	r3, [r2, #28]
  HAL_SPI_Init(&hspi1);
 8003054:	4803      	ldr	r0, [pc, #12]	@ (8003064 <MX_SPI1_Init+0xd0>)
 8003056:	f001 fbbb 	bl	80047d0 <HAL_SPI_Init>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000410 	.word	0x20000410
 8003068:	40013000 	.word	0x40013000
 800306c:	6b5fca6b 	.word	0x6b5fca6b

08003070 <MX_USART2_Init>:
  *         - Stop Bit:   1
  *         - Parity:     None
  *         - Mode:       TX/RX
  */
void MX_USART2_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <MX_USART2_Init+0x40>)
 8003076:	4a0f      	ldr	r2, [pc, #60]	@ (80030b4 <MX_USART2_Init+0x44>)
 8003078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <MX_USART2_Init+0x40>)
 800307c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <MX_USART2_Init+0x40>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <MX_USART2_Init+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <MX_USART2_Init+0x40>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <MX_USART2_Init+0x40>)
 8003096:	220c      	movs	r2, #12
 8003098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <MX_USART2_Init+0x40>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <MX_USART2_Init+0x40>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 80030a6:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <MX_USART2_Init+0x40>)
 80030a8:	f001 ffb0 	bl	800500c <HAL_UART_Init>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200003b8 	.word	0x200003b8
 80030b4:	40004400 	.word	0x40004400

080030b8 <NUCLEO_Board_Init>:
/**
  * @brief  This function initializes some peripherals of the NUCELO board
  *         (HAL, Clock, NVIC, LED and user button)
  */
void NUCLEO_Board_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030bc:	f000 f862 	bl	8003184 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80030c0:	f7ff ff08 	bl	8002ed4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030c4:	f7ff ff54 	bl	8002f70 <MX_GPIO_Init>
  
  /* Initialize the SPI used by the X-NUCLEO-IHM02A1 */
  MX_SPI_Init();
 80030c8:	f7ff ff5d 	bl	8002f86 <MX_SPI_Init>
  
#ifdef NUCLEO_USE_USART
  /* Initialize the USART peripheral */
  MX_USART2_Init();
 80030cc:	f7ff ffd0 	bl	8003070 <MX_USART2_Init>
#endif  

#ifdef NUCLEO_USE_USER_LED
  /* Perform 3 repetition of blinking user LED at 50% duty cycle with 250 ms as period */
  User_LED_Blinking(3, 750);
 80030d0:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80030d4:	2003      	movs	r0, #3
 80030d6:	f000 f802 	bl	80030de <User_LED_Blinking>
#endif
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}

080030de <User_LED_Blinking>:
  * @brief  Blinking user LED at 50% duty cycle.
  * @param  repetitions The number of  repetions.
  * @param  period_ms   The blinking period in ms.
  */
void User_LED_Blinking(uint8_t repetitions, uint16_t period_ms)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	460a      	mov	r2, r1
 80030e8:	71fb      	strb	r3, [r7, #7]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80bb      	strh	r3, [r7, #4]
  uint8_t r;
  uint16_t half_period_ms;
  
  half_period_ms = period_ms >> 1;
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	81bb      	strh	r3, [r7, #12]
  
  for (r=0; r<repetitions; r++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e010      	b.n	800311c <User_LED_Blinking+0x3e>
  {
    /* Switch on the user LED */
    BSP_LED_On(LED2);
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7ff f9d4 	bl	80024a8 <BSP_LED_On>
    /* ms delay */
    HAL_Delay(half_period_ms);
 8003100:	89bb      	ldrh	r3, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f896 	bl	8003234 <HAL_Delay>
    /* Switch off the user LED */
    BSP_LED_Off(LED2);
 8003108:	2000      	movs	r0, #0
 800310a:	f7ff f9e1 	bl	80024d0 <BSP_LED_Off>
    /* ms delay */
    HAL_Delay(half_period_ms);
 800310e:	89bb      	ldrh	r3, [r7, #12]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f88f 	bl	8003234 <HAL_Delay>
  for (r=0; r<repetitions; r++)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	3301      	adds	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	429a      	cmp	r2, r3
 8003122:	d3ea      	bcc.n	80030fa <User_LED_Blinking+0x1c>
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003134:	f7ff fa38 	bl	80025a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800313a:	490d      	ldr	r1, [pc, #52]	@ (8003170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003140:	e002      	b.n	8003148 <LoopCopyDataInit>

08003142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003146:	3304      	adds	r3, #4

08003148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800314c:	d3f9      	bcc.n	8003142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003150:	4c0a      	ldr	r4, [pc, #40]	@ (800317c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003154:	e001      	b.n	800315a <LoopFillZerobss>

08003156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003158:	3204      	adds	r2, #4

0800315a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800315c:	d3fb      	bcc.n	8003156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800315e:	f002 fd33 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003162:	f7ff f841 	bl	80021e8 <main>
  bx  lr    
 8003166:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003168:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8003174:	0800679c 	.word	0x0800679c
  ldr r2, =_sbss
 8003178:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 800317c:	2000046c 	.word	0x2000046c

08003180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC_IRQHandler>
	...

08003184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <HAL_Init+0x40>)
 800318e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <HAL_Init+0x40>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800319e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a0:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <HAL_Init+0x40>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 f94d 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f000 f808 	bl	80031c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80031b8:	f7ff f838 	bl	800222c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80031d0:	f000 ff3e 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4a09      	ldr	r2, [pc, #36]	@ (80031fc <HAL_InitTick+0x34>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f9b0 	bl	8003544 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	f000 f94e 	bl	800348c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  uwTick++;
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <HAL_IncTick+0x18>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	4a03      	ldr	r2, [pc, #12]	@ (8003218 <HAL_IncTick+0x18>)
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	20000468 	.word	0x20000468

0800321c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return uwTick;
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <HAL_GetTick+0x14>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000468 	.word	0x20000468

08003234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8003240:	f7ff ffec 	bl	800321c <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8003246:	bf00      	nop
 8003248:	f7ff ffe8 	bl	800321c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad2      	subs	r2, r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3f7      	bcc.n	8003248 <HAL_Delay+0x14>
  {
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <__NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0b      	blt.n	80032f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	@ (8003300 <__NVIC_EnableIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db12      	blt.n	800333c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	490a      	ldr	r1, [pc, #40]	@ (8003348 <__NVIC_DisableIRQ+0x44>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	3320      	adds	r3, #32
 800332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003330:	f3bf 8f4f 	dsb	sy
}
 8003334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003336:	f3bf 8f6f 	isb	sy
}
 800333a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	@ (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff8e 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b07      	cmp	r3, #7
 8003458:	d00f      	beq.n	800347a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b06      	cmp	r3, #6
 800345e:	d00c      	beq.n	800347a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d009      	beq.n	800347a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d006      	beq.n	800347a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d003      	beq.n	800347a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003472:	21a4      	movs	r1, #164	@ 0xa4
 8003474:	4804      	ldr	r0, [pc, #16]	@ (8003488 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003476:	f7fe fec3 	bl	8002200 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fef2 	bl	8003264 <__NVIC_SetPriorityGrouping>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	08006044 	.word	0x08006044

0800348c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b0f      	cmp	r3, #15
 80034a2:	d903      	bls.n	80034ac <HAL_NVIC_SetPriority+0x20>
 80034a4:	21bc      	movs	r1, #188	@ 0xbc
 80034a6:	480e      	ldr	r0, [pc, #56]	@ (80034e0 <HAL_NVIC_SetPriority+0x54>)
 80034a8:	f7fe feaa 	bl	8002200 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	d903      	bls.n	80034ba <HAL_NVIC_SetPriority+0x2e>
 80034b2:	21bd      	movs	r1, #189	@ 0xbd
 80034b4:	480a      	ldr	r0, [pc, #40]	@ (80034e0 <HAL_NVIC_SetPriority+0x54>)
 80034b6:	f7fe fea3 	bl	8002200 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ba:	f7ff fef7 	bl	80032ac <__NVIC_GetPriorityGrouping>
 80034be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	6978      	ldr	r0, [r7, #20]
 80034c6:	f7ff ff6b 	bl	80033a0 <NVIC_EncodePriority>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff3a 	bl	800334c <__NVIC_SetPriority>
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08006044 	.word	0x08006044

080034e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da03      	bge.n	80034fe <HAL_NVIC_EnableIRQ+0x1a>
 80034f6:	21d0      	movs	r1, #208	@ 0xd0
 80034f8:	4805      	ldr	r0, [pc, #20]	@ (8003510 <HAL_NVIC_EnableIRQ+0x2c>)
 80034fa:	f7fe fe81 	bl	8002200 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fee0 	bl	80032c8 <__NVIC_EnableIRQ>
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	08006044 	.word	0x08006044

08003514 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da03      	bge.n	800352e <HAL_NVIC_DisableIRQ+0x1a>
 8003526:	21e0      	movs	r1, #224	@ 0xe0
 8003528:	4805      	ldr	r0, [pc, #20]	@ (8003540 <HAL_NVIC_DisableIRQ+0x2c>)
 800352a:	f7fe fe69 	bl	8002200 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fee6 	bl	8003304 <__NVIC_DisableIRQ>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	08006044 	.word	0x08006044

08003544 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff5b 	bl	8003408 <SysTick_Config>
 8003552:	4603      	mov	r3, r0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003560:	f000 f802 	bl	8003568 <HAL_SYSTICK_Callback>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a34      	ldr	r2, [pc, #208]	@ (8003664 <HAL_GPIO_Init+0xec>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00f      	beq.n	80035b6 <HAL_GPIO_Init+0x3e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a33      	ldr	r2, [pc, #204]	@ (8003668 <HAL_GPIO_Init+0xf0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00b      	beq.n	80035b6 <HAL_GPIO_Init+0x3e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a32      	ldr	r2, [pc, #200]	@ (800366c <HAL_GPIO_Init+0xf4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <HAL_GPIO_Init+0x3e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a31      	ldr	r2, [pc, #196]	@ (8003670 <HAL_GPIO_Init+0xf8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x3e>
 80035ae:	21c5      	movs	r1, #197	@ 0xc5
 80035b0:	4830      	ldr	r0, [pc, #192]	@ (8003674 <HAL_GPIO_Init+0xfc>)
 80035b2:	f7fe fe25 	bl	8002200 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <HAL_GPIO_Init+0x50>
 80035c0:	21c6      	movs	r1, #198	@ 0xc6
 80035c2:	482c      	ldr	r0, [pc, #176]	@ (8003674 <HAL_GPIO_Init+0xfc>)
 80035c4:	f7fe fe1c 	bl	8002200 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d035      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d031      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b11      	cmp	r3, #17
 80035de:	d02d      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d029      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b12      	cmp	r3, #18
 80035ee:	d025      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a20      	ldr	r2, [pc, #128]	@ (8003678 <HAL_GPIO_Init+0x100>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d020      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a1f      	ldr	r2, [pc, #124]	@ (800367c <HAL_GPIO_Init+0x104>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d01b      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <HAL_GPIO_Init+0x108>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d016      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4a1c      	ldr	r2, [pc, #112]	@ (8003684 <HAL_GPIO_Init+0x10c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d011      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <HAL_GPIO_Init+0x110>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00c      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a19      	ldr	r2, [pc, #100]	@ (800368c <HAL_GPIO_Init+0x114>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0xc4>
 8003634:	21c7      	movs	r1, #199	@ 0xc7
 8003636:	480f      	ldr	r0, [pc, #60]	@ (8003674 <HAL_GPIO_Init+0xfc>)
 8003638:	f7fe fde2 	bl	8002200 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_GPIO_Init+0xe4>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d007      	beq.n	800365c <HAL_GPIO_Init+0xe4>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0xe4>
 8003654:	21c8      	movs	r1, #200	@ 0xc8
 8003656:	4807      	ldr	r0, [pc, #28]	@ (8003674 <HAL_GPIO_Init+0xfc>)
 8003658:	f7fe fdd2 	bl	8002200 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e197      	b.n	8003992 <HAL_GPIO_Init+0x41a>
 8003662:	bf00      	nop
 8003664:	40020000 	.word	0x40020000
 8003668:	40020400 	.word	0x40020400
 800366c:	40020800 	.word	0x40020800
 8003670:	40021c00 	.word	0x40021c00
 8003674:	08006080 	.word	0x08006080
 8003678:	10110000 	.word	0x10110000
 800367c:	10210000 	.word	0x10210000
 8003680:	10310000 	.word	0x10310000
 8003684:	10120000 	.word	0x10120000
 8003688:	10220000 	.word	0x10220000
 800368c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	f040 816f 	bne.w	800398c <HAL_GPIO_Init+0x414>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x146>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d12f      	bne.n	800371e <HAL_GPIO_Init+0x1a6>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b09      	cmp	r3, #9
 80036c4:	d907      	bls.n	80036d6 <HAL_GPIO_Init+0x15e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x15e>
 80036ce:	21d9      	movs	r1, #217	@ 0xd9
 80036d0:	4875      	ldr	r0, [pc, #468]	@ (80038a8 <HAL_GPIO_Init+0x330>)
 80036d2:	f7fe fd95 	bl	8002200 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0203 	and.w	r2, r3, #3
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d00b      	beq.n	8003772 <HAL_GPIO_Init+0x1fa>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d007      	beq.n	8003772 <HAL_GPIO_Init+0x1fa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003766:	2b11      	cmp	r3, #17
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x1fa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b12      	cmp	r3, #18
 8003770:	d144      	bne.n	80037fc <HAL_GPIO_Init+0x284>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00f      	beq.n	800379a <HAL_GPIO_Init+0x222>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00b      	beq.n	800379a <HAL_GPIO_Init+0x222>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x222>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x222>
 8003792:	21ec      	movs	r1, #236	@ 0xec
 8003794:	4844      	ldr	r0, [pc, #272]	@ (80038a8 <HAL_GPIO_Init+0x330>)
 8003796:	f7fe fd33 	bl	8002200 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 0201 	and.w	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a9 	beq.w	800398c <HAL_GPIO_Init+0x414>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383a:	4b1c      	ldr	r3, [pc, #112]	@ (80038ac <HAL_GPIO_Init+0x334>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	4a1b      	ldr	r2, [pc, #108]	@ (80038ac <HAL_GPIO_Init+0x334>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003844:	6453      	str	r3, [r2, #68]	@ 0x44
 8003846:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_GPIO_Init+0x334>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003852:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <HAL_GPIO_Init+0x338>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a0e      	ldr	r2, [pc, #56]	@ (80038b4 <HAL_GPIO_Init+0x33c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_GPIO_Init+0x34c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <HAL_GPIO_Init+0x340>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x32a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <HAL_GPIO_Init+0x344>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x326>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a0b      	ldr	r2, [pc, #44]	@ (80038c0 <HAL_GPIO_Init+0x348>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x322>
 8003896:	2307      	movs	r3, #7
 8003898:	e015      	b.n	80038c6 <HAL_GPIO_Init+0x34e>
 800389a:	2308      	movs	r3, #8
 800389c:	e013      	b.n	80038c6 <HAL_GPIO_Init+0x34e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e011      	b.n	80038c6 <HAL_GPIO_Init+0x34e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00f      	b.n	80038c6 <HAL_GPIO_Init+0x34e>
 80038a6:	bf00      	nop
 80038a8:	08006080 	.word	0x08006080
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40013800 	.word	0x40013800
 80038b4:	40020000 	.word	0x40020000
 80038b8:	40020400 	.word	0x40020400
 80038bc:	40020800 	.word	0x40020800
 80038c0:	40021c00 	.word	0x40021c00
 80038c4:	2300      	movs	r3, #0
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f002 0203 	and.w	r2, r2, #3
 80038cc:	0092      	lsls	r2, r2, #2
 80038ce:	4093      	lsls	r3, r2
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038d6:	4933      	ldr	r1, [pc, #204]	@ (80039a4 <HAL_GPIO_Init+0x42c>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e4:	4b30      	ldr	r3, [pc, #192]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x390>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003908:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800390e:	4b26      	ldr	r3, [pc, #152]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x3ba>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003932:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003938:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395c:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003962:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003986:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <HAL_GPIO_Init+0x430>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	f67f ae7b 	bls.w	8003690 <HAL_GPIO_Init+0x118>
      }
    }
  }
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40013800 	.word	0x40013800
 80039a8:	40013c00 	.word	0x40013c00

080039ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
 80039b8:	4613      	mov	r3, r2
 80039ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <HAL_GPIO_WritePin+0x20>
 80039c2:	f240 11b1 	movw	r1, #433	@ 0x1b1
 80039c6:	480e      	ldr	r0, [pc, #56]	@ (8003a00 <HAL_GPIO_WritePin+0x54>)
 80039c8:	f7fe fc1a 	bl	8002200 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80039cc:	787b      	ldrb	r3, [r7, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_WritePin+0x36>
 80039d2:	787b      	ldrb	r3, [r7, #1]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d004      	beq.n	80039e2 <HAL_GPIO_WritePin+0x36>
 80039d8:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80039dc:	4808      	ldr	r0, [pc, #32]	@ (8003a00 <HAL_GPIO_WritePin+0x54>)
 80039de:	f7fe fc0f 	bl	8002200 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80039e2:	787b      	ldrb	r3, [r7, #1]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e8:	887a      	ldrh	r2, [r7, #2]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039ee:	e003      	b.n	80039f8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	041a      	lsls	r2, r3, #16
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	08006080 	.word	0x08006080

08003a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a1a:	4a05      	ldr	r2, [pc, #20]	@ (8003a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fa0c 	bl	8001e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x1e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d904      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x28>
 8003a52:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8003a56:	4888      	ldr	r0, [pc, #544]	@ (8003c78 <HAL_RCC_ClockConfig+0x244>)
 8003a58:	f7fe fbd2 	bl	8002200 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d019      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d016      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d013      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d010      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d00d      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d007      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b07      	cmp	r3, #7
 8003a8a:	d004      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x62>
 8003a8c:	f240 2161 	movw	r1, #609	@ 0x261
 8003a90:	4879      	ldr	r0, [pc, #484]	@ (8003c78 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	f7fe fbb5 	bl	8002200 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003a96:	4b79      	ldr	r3, [pc, #484]	@ (8003c7c <HAL_RCC_ClockConfig+0x248>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f240 80ef 	bls.w	8003c84 <HAL_RCC_ClockConfig+0x250>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b75      	ldr	r3, [pc, #468]	@ (8003c7c <HAL_RCC_ClockConfig+0x248>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aae:	4b73      	ldr	r3, [pc, #460]	@ (8003c7c <HAL_RCC_ClockConfig+0x248>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x8c>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e225      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d031      	beq.n	8003b30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d024      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b80      	cmp	r3, #128	@ 0x80
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b90      	cmp	r3, #144	@ 0x90
 8003ae2:	d01c      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2ba0      	cmp	r3, #160	@ 0xa0
 8003aea:	d018      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2bb0      	cmp	r3, #176	@ 0xb0
 8003af2:	d014      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2bc0      	cmp	r3, #192	@ 0xc0
 8003afa:	d010      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2bd0      	cmp	r3, #208	@ 0xd0
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2be0      	cmp	r3, #224	@ 0xe0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2bf0      	cmp	r3, #240	@ 0xf0
 8003b12:	d004      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xea>
 8003b14:	f240 2177 	movw	r1, #631	@ 0x277
 8003b18:	4857      	ldr	r0, [pc, #348]	@ (8003c78 <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	f7fe fb71 	bl	8002200 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1e:	4b58      	ldr	r3, [pc, #352]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4955      	ldr	r1, [pc, #340]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 818a 	beq.w	8003e52 <HAL_RCC_ClockConfig+0x41e>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x134>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d00c      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x134>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d008      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x134>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d004      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x134>
 8003b5e:	f240 217e 	movw	r1, #638	@ 0x27e
 8003b62:	4845      	ldr	r0, [pc, #276]	@ (8003c78 <HAL_RCC_ClockConfig+0x244>)
 8003b64:	f7fe fb4c 	bl	8002200 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b70:	4b43      	ldr	r3, [pc, #268]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d119      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e1c5      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d003      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x15c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b3b      	ldr	r3, [pc, #236]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e1b5      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b37      	ldr	r3, [pc, #220]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e1ad      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb0:	4b33      	ldr	r3, [pc, #204]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 0203 	bic.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4930      	ldr	r1, [pc, #192]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7ff fb2b 	bl	800321c <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d112      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_ClockConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd2:	f7ff fb23 	bl	800321c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e191      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be8:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d1ee      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x19e>
 8003bf4:	e12d      	b.n	8003e52 <HAL_RCC_ClockConfig+0x41e>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x1f0>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c00:	f7ff fb0c 	bl	800321c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e17a      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c16:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d1ee      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x1cc>
 8003c22:	e116      	b.n	8003e52 <HAL_RCC_ClockConfig+0x41e>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d11d      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x234>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_ClockConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2e:	f7ff faf5 	bl	800321c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e163      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003c44:	4b0e      	ldr	r3, [pc, #56]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d1ee      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x1fa>
 8003c50:	e0ff      	b.n	8003e52 <HAL_RCC_ClockConfig+0x41e>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c52:	f7ff fae3 	bl	800321c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e151      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_ClockConfig+0x24c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x21e>
 8003c74:	e0ed      	b.n	8003e52 <HAL_RCC_ClockConfig+0x41e>
 8003c76:	bf00      	nop
 8003c78:	080060bc 	.word	0x080060bc
 8003c7c:	40023c00 	.word	0x40023c00
 8003c80:	40023800 	.word	0x40023800
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d031      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x2c0>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d024      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b80      	cmp	r3, #128	@ 0x80
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b90      	cmp	r3, #144	@ 0x90
 8003ca6:	d01c      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cae:	d018      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2bd0      	cmp	r3, #208	@ 0xd0
 8003cc6:	d00c      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2be0      	cmp	r3, #224	@ 0xe0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2bf0      	cmp	r3, #240	@ 0xf0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2ae>
 8003cd8:	f240 21d1 	movw	r1, #721	@ 0x2d1
 8003cdc:	488d      	ldr	r0, [pc, #564]	@ (8003f14 <HAL_RCC_ClockConfig+0x4e0>)
 8003cde:	f7fe fa8f 	bl	8002200 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	498a      	ldr	r1, [pc, #552]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 809b 	beq.w	8003e38 <HAL_RCC_ClockConfig+0x404>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2f8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2f8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2f8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d004      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x2f8>
 8003d22:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 8003d26:	487b      	ldr	r0, [pc, #492]	@ (8003f14 <HAL_RCC_ClockConfig+0x4e0>)
 8003d28:	f7fe fa6a 	bl	8002200 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x310>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d34:	4b78      	ldr	r3, [pc, #480]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d119      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x340>
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0e3      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d003      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x320>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x330>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d54:	4b70      	ldr	r3, [pc, #448]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x340>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d3      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	4b6c      	ldr	r3, [pc, #432]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x340>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0cb      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d74:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 0203 	bic.w	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4965      	ldr	r1, [pc, #404]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7ff fa49 	bl	800321c <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d112      	bne.n	8003dba <HAL_RCC_ClockConfig+0x386>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_ClockConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d96:	f7ff fa41 	bl	800321c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_ClockConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e0af      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dac:	4b5a      	ldr	r3, [pc, #360]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d1ee      	bne.n	8003d96 <HAL_RCC_ClockConfig+0x362>
 8003db8:	e03e      	b.n	8003e38 <HAL_RCC_ClockConfig+0x404>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d112      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x3b4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7ff fa2a 	bl	800321c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e098      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dda:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x390>
 8003de6:	e027      	b.n	8003e38 <HAL_RCC_ClockConfig+0x404>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d11d      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x3f8>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_ClockConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df2:	f7ff fa13 	bl	800321c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e081      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003e08:	4b43      	ldr	r3, [pc, #268]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x3be>
 8003e14:	e010      	b.n	8003e38 <HAL_RCC_ClockConfig+0x404>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e16:	f7ff fa01 	bl	800321c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x3f8>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e06f      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ee      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x3e2>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e38:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <HAL_RCC_ClockConfig+0x4e8>)
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e40:	4b36      	ldr	r3, [pc, #216]	@ (8003f1c <HAL_RCC_ClockConfig+0x4e8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x41e>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e05c      	b.n	8003f0c <HAL_RCC_ClockConfig+0x4d8>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d025      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x476>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d018      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x464>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x464>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e78:	d00e      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x464>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003e82:	d009      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x464>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003e8c:	d004      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x464>
 8003e8e:	f240 3132 	movw	r1, #818	@ 0x332
 8003e92:	4820      	ldr	r0, [pc, #128]	@ (8003f14 <HAL_RCC_ClockConfig+0x4e0>)
 8003e94:	f7fe f9b4 	bl	8002200 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	4b1f      	ldr	r3, [pc, #124]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	491c      	ldr	r1, [pc, #112]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d026      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x4d0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x4bc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x4bc>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x4bc>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003eda:	d009      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x4bc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x4bc>
 8003ee6:	f240 3139 	movw	r1, #825	@ 0x339
 8003eea:	480a      	ldr	r0, [pc, #40]	@ (8003f14 <HAL_RCC_ClockConfig+0x4e0>)
 8003eec:	f7fe f988 	bl	8002200 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ef0:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4906      	ldr	r1, [pc, #24]	@ (8003f18 <HAL_RCC_ClockConfig+0x4e4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7ff f95f 	bl	80031c8 <HAL_InitTick>
  
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	080060bc 	.word	0x080060bc
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40023c00 	.word	0x40023c00

08003f20 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b08f      	sub	sp, #60	@ 0x3c
 8003f24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2e:	2300      	movs	r3, #0
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t sysclockfreq = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f36:	4b43      	ldr	r3, [pc, #268]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x124>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d00c      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x3c>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d874      	bhi.n	8004030 <HAL_RCC_GetSysClockFreq+0x110>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x30>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x36>
 8003f4e:	e06f      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x110>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b3d      	ldr	r3, [pc, #244]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x128>)
 8003f52:	633b      	str	r3, [r7, #48]	@ 0x30
       break;
 8003f54:	e06f      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x116>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f56:	4b3d      	ldr	r3, [pc, #244]	@ (800404c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f58:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003f5a:	e06c      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x116>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f5c:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x124>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f66:	4b37      	ldr	r3, [pc, #220]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x124>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01f      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003f72:	4a36      	ldr	r2, [pc, #216]	@ (800404c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7a:	4b32      	ldr	r3, [pc, #200]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x124>)
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f82:	400b      	ands	r3, r1
 8003f84:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8003f88:	6239      	str	r1, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6a39      	ldr	r1, [r7, #32]
 8003f8c:	fa91 f1a1 	rbit	r1, r1
 8003f90:	61f9      	str	r1, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f92:	69f9      	ldr	r1, [r7, #28]
 8003f94:	6279      	str	r1, [r7, #36]	@ 0x24
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    return 32U;
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  return __builtin_clz(value);
 8003fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa2:	fab1 f181 	clz	r1, r1
 8003fa6:	b2c9      	uxtb	r1, r1
 8003fa8:	40cb      	lsrs	r3, r1
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb0:	e01e      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xd0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003fb2:	4a25      	ldr	r2, [pc, #148]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x128>)
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fba:	4b22      	ldr	r3, [pc, #136]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x124>)
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fc2:	400b      	ands	r3, r1
 8003fc4:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 8003fc8:	6179      	str	r1, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	fa91 f1a1 	rbit	r1, r1
 8003fd0:	6139      	str	r1, [r7, #16]
  return result;
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	61b9      	str	r1, [r7, #24]
  if (value == 0U)
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    return 32U;
 8003fdc:	2120      	movs	r1, #32
 8003fde:	e003      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xc8>
  return __builtin_clz(value);
 8003fe0:	69b9      	ldr	r1, [r7, #24]
 8003fe2:	fab1 f181 	clz	r1, r1
 8003fe6:	b2c9      	uxtb	r1, r1
 8003fe8:	40cb      	lsrs	r3, r1
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003ff0:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x124>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ffc:	60ba      	str	r2, [r7, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	fa92 f2a2 	rbit	r2, r2
 8004004:	607a      	str	r2, [r7, #4]
  return result;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	60fa      	str	r2, [r7, #12]
  if (value == 0U)
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	2a00      	cmp	r2, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0xf4>
    return 32U;
 8004010:	2220      	movs	r2, #32
 8004012:	e003      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xfc>
  return __builtin_clz(value);
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	fab2 f282 	clz	r2, r2
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	40d3      	lsrs	r3, r2
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28
      
      sysclockfreq = pllvco/pllp;
 8004024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800402e:	e002      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x116>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x128>)
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004038:	4618      	mov	r0, r3
 800403a:	373c      	adds	r7, #60	@ 0x3c
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004056:	f7ff ff63 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 800405a:	4601      	mov	r1, r0
 800405c:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004064:	22f0      	movs	r2, #240	@ 0xf0
 8004066:	60ba      	str	r2, [r7, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	fa92 f2a2 	rbit	r2, r2
 800406e:	607a      	str	r2, [r7, #4]
  return result;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60fa      	str	r2, [r7, #12]
  if (value == 0U)
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	2a00      	cmp	r2, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_GetHCLKFreq+0x2e>
    return 32U;
 800407a:	2220      	movs	r2, #32
 800407c:	e003      	b.n	8004086 <HAL_RCC_GetHCLKFreq+0x36>
  return __builtin_clz(value);
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	fab2 f282 	clz	r2, r2
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	40d3      	lsrs	r3, r2
 8004088:	4a06      	ldr	r2, [pc, #24]	@ (80040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	fa21 f303 	lsr.w	r3, r1, r3
 8004090:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004092:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	08006784 	.word	0x08006784
 80040a8:	200000a0 	.word	0x200000a0

080040ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80040b2:	f7ff ffcd 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80040b6:	4601      	mov	r1, r0
 80040b8:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <HAL_RCC_GetPCLK1Freq+0x4c>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80040c0:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80040c4:	60ba      	str	r2, [r7, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	fa92 f2a2 	rbit	r2, r2
 80040cc:	607a      	str	r2, [r7, #4]
  return result;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	60fa      	str	r2, [r7, #12]
  if (value == 0U)
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_GetPCLK1Freq+0x30>
    return 32U;
 80040d8:	2220      	movs	r2, #32
 80040da:	e003      	b.n	80040e4 <HAL_RCC_GetPCLK1Freq+0x38>
  return __builtin_clz(value);
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	fab2 f282 	clz	r2, r2
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	40d3      	lsrs	r3, r2
 80040e6:	4a05      	ldr	r2, [pc, #20]	@ (80040fc <HAL_RCC_GetPCLK1Freq+0x50>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	08006784 	.word	0x08006784

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004106:	f7ff ffa3 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800410a:	4601      	mov	r1, r0
 800410c:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <HAL_RCC_GetPCLK2Freq+0x4c>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004114:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8004118:	60ba      	str	r2, [r7, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	fa92 f2a2 	rbit	r2, r2
 8004120:	607a      	str	r2, [r7, #4]
  return result;
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	60fa      	str	r2, [r7, #12]
  if (value == 0U)
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	2a00      	cmp	r2, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_GetPCLK2Freq+0x30>
    return 32U;
 800412c:	2220      	movs	r2, #32
 800412e:	e003      	b.n	8004138 <HAL_RCC_GetPCLK2Freq+0x38>
  return __builtin_clz(value);
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	fab2 f282 	clz	r2, r2
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	40d3      	lsrs	r3, r2
 800413a:	4a05      	ldr	r2, [pc, #20]	@ (8004150 <HAL_RCC_GetPCLK2Freq+0x50>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	08006784 	.word	0x08006784

08004154 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b096      	sub	sp, #88	@ 0x58
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;  
 800415c:	2300      	movs	r3, #0
 800415e:	657b      	str	r3, [r7, #84]	@ 0x54
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d904      	bls.n	8004172 <HAL_RCC_OscConfig+0x1e>
 8004168:	f240 61a9 	movw	r1, #1705	@ 0x6a9
 800416c:	4891      	ldr	r0, [pc, #580]	@ (80043b4 <HAL_RCC_OscConfig+0x260>)
 800416e:	f7fe f847 	bl	8002200 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d07d      	beq.n	800427a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d008      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d004      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4c>
 8004196:	f240 61ae 	movw	r1, #1710	@ 0x6ae
 800419a:	4886      	ldr	r0, [pc, #536]	@ (80043b4 <HAL_RCC_OscConfig+0x260>)
 800419c:	f7fe f830 	bl	8002200 <assert_failed>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041a0:	4b85      	ldr	r3, [pc, #532]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d00c      	beq.n	80041c6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ac:	4b82      	ldr	r3, [pc, #520]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d112      	bne.n	80041de <HAL_RCC_OscConfig+0x8a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b8:	4b7f      	ldr	r3, [pc, #508]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c4:	d10b      	bne.n	80041de <HAL_RCC_OscConfig+0x8a>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c6:	4b7c      	ldr	r3, [pc, #496]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d052      	beq.n	8004278 <HAL_RCC_OscConfig+0x124>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d14e      	bne.n	8004278 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e2ee      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80041de:	4b77      	ldr	r3, [pc, #476]	@ (80043bc <HAL_RCC_OscConfig+0x268>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7ff f81a 	bl	800321c <HAL_GetTick>
 80041e8:	6578      	str	r0, [r7, #84]	@ 0x54
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0xae>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ec:	f7ff f816 	bl	800321c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xae>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e2dc      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	4b6d      	ldr	r3, [pc, #436]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ee      	bne.n	80041ec <HAL_RCC_OscConfig+0x98>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4b6a      	ldr	r3, [pc, #424]	@ (80043bc <HAL_RCC_OscConfig+0x268>)
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCC_OscConfig+0xf8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fffc 	bl	800321c <HAL_GetTick>
 8004224:	6578      	str	r0, [r7, #84]	@ 0x54
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fe fff8 	bl	800321c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xea>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e2be      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b5e      	ldr	r3, [pc, #376]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ee      	beq.n	8004228 <HAL_RCC_OscConfig+0xd4>
 800424a:	e016      	b.n	800427a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe ffe6 	bl	800321c <HAL_GetTick>
 8004250:	6578      	str	r0, [r7, #84]	@ 0x54

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe ffe2 	bl	800321c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e2a8      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	4b53      	ldr	r3, [pc, #332]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ee      	bne.n	8004254 <HAL_RCC_OscConfig+0x100>
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a4 	beq.w	80043d0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_OscConfig+0x14e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d004      	beq.n	80042a2 <HAL_RCC_OscConfig+0x14e>
 8004298:	f240 61f5 	movw	r1, #1781	@ 0x6f5
 800429c:	4845      	ldr	r0, [pc, #276]	@ (80043b4 <HAL_RCC_OscConfig+0x260>)
 800429e:	f7fd ffaf 	bl	8002200 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b1f      	cmp	r3, #31
 80042a8:	d904      	bls.n	80042b4 <HAL_RCC_OscConfig+0x160>
 80042aa:	f240 61f6 	movw	r1, #1782	@ 0x6f6
 80042ae:	4841      	ldr	r0, [pc, #260]	@ (80043b4 <HAL_RCC_OscConfig+0x260>)
 80042b0:	f7fd ffa6 	bl	8002200 <assert_failed>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042b4:	4b40      	ldr	r3, [pc, #256]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00b      	beq.n	80042d8 <HAL_RCC_OscConfig+0x184>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c0:	4b3d      	ldr	r3, [pc, #244]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d12d      	bne.n	8004328 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042cc:	4b3a      	ldr	r3, [pc, #232]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d127      	bne.n	8004328 <HAL_RCC_OscConfig+0x1d4>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d8:	4b37      	ldr	r3, [pc, #220]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_OscConfig+0x19c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_OscConfig+0x19c>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e265      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f0:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	21f8      	movs	r1, #248	@ 0xf8
 80042fe:	64f9      	str	r1, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004302:	fa91 f1a1 	rbit	r1, r1
 8004306:	64b9      	str	r1, [r7, #72]	@ 0x48
  return result;
 8004308:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800430a:	6539      	str	r1, [r7, #80]	@ 0x50
  if (value == 0U)
 800430c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800430e:	2900      	cmp	r1, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_OscConfig+0x1c2>
    return 32U;
 8004312:	2120      	movs	r1, #32
 8004314:	e003      	b.n	800431e <HAL_RCC_OscConfig+0x1ca>
  return __builtin_clz(value);
 8004316:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004318:	fab1 f181 	clz	r1, r1
 800431c:	b2c9      	uxtb	r1, r1
 800431e:	408b      	lsls	r3, r1
 8004320:	4925      	ldr	r1, [pc, #148]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e053      	b.n	80043d0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d031      	beq.n	8004394 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <HAL_RCC_OscConfig+0x26c>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fe ff71 	bl	800321c <HAL_GetTick>
 800433a:	6578      	str	r0, [r7, #84]	@ 0x54

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe ff6d 	bl	800321c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	@ 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e235      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b19      	ldr	r3, [pc, #100]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x1ea>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b16      	ldr	r3, [pc, #88]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	21f8      	movs	r1, #248	@ 0xf8
 800436a:	6439      	str	r1, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800436e:	fa91 f1a1 	rbit	r1, r1
 8004372:	63f9      	str	r1, [r7, #60]	@ 0x3c
  return result;
 8004374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004376:	6479      	str	r1, [r7, #68]	@ 0x44
  if (value == 0U)
 8004378:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800437a:	2900      	cmp	r1, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x22e>
    return 32U;
 800437e:	2120      	movs	r1, #32
 8004380:	e003      	b.n	800438a <HAL_RCC_OscConfig+0x236>
  return __builtin_clz(value);
 8004382:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004384:	fab1 f181 	clz	r1, r1
 8004388:	b2c9      	uxtb	r1, r1
 800438a:	408b      	lsls	r3, r1
 800438c:	490a      	ldr	r1, [pc, #40]	@ (80043b8 <HAL_RCC_OscConfig+0x264>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <HAL_RCC_OscConfig+0x26c>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fe ff3f 	bl	800321c <HAL_GetTick>
 800439e:	6578      	str	r0, [r7, #84]	@ 0x54
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a0:	e010      	b.n	80043c4 <HAL_RCC_OscConfig+0x270>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a2:	f7fe ff3b 	bl	800321c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	@ 0x64
 80043ae:	d909      	bls.n	80043c4 <HAL_RCC_OscConfig+0x270>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e203      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
 80043b4:	080060f4 	.word	0x080060f4
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40023802 	.word	0x40023802
 80043c0:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c4:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e8      	bne.n	80043a2 <HAL_RCC_OscConfig+0x24e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03d      	beq.n	8004458 <HAL_RCC_OscConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_OscConfig+0x2a2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d004      	beq.n	80043f6 <HAL_RCC_OscConfig+0x2a2>
 80043ec:	f240 713c 	movw	r1, #1852	@ 0x73c
 80043f0:	485c      	ldr	r0, [pc, #368]	@ (8004564 <HAL_RCC_OscConfig+0x410>)
 80043f2:	f7fd ff05 	bl	8002200 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCC_OscConfig+0x2d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004568 <HAL_RCC_OscConfig+0x414>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fe ff0a 	bl	800321c <HAL_GetTick>
 8004408:	6578      	str	r0, [r7, #84]	@ 0x54
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440c:	f7fe ff06 	bl	800321c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x2ca>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1ce      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	4b50      	ldr	r3, [pc, #320]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x2b8>
 800442a:	e015      	b.n	8004458 <HAL_RCC_OscConfig+0x304>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442c:	4b4e      	ldr	r3, [pc, #312]	@ (8004568 <HAL_RCC_OscConfig+0x414>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fe fef3 	bl	800321c <HAL_GetTick>
 8004436:	6578      	str	r0, [r7, #84]	@ 0x54
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443a:	f7fe feef 	bl	800321c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b64      	cmp	r3, #100	@ 0x64
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1b7      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444c:	4b44      	ldr	r3, [pc, #272]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f0      	bne.n	800443a <HAL_RCC_OscConfig+0x2e6>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 808d 	beq.w	8004580 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_RCC_OscConfig+0x334>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d008      	beq.n	8004488 <HAL_RCC_OscConfig+0x334>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d004      	beq.n	8004488 <HAL_RCC_OscConfig+0x334>
 800447e:	f240 7166 	movw	r1, #1894	@ 0x766
 8004482:	4838      	ldr	r0, [pc, #224]	@ (8004564 <HAL_RCC_OscConfig+0x410>)
 8004484:	f7fd febc 	bl	8002200 <assert_failed>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	4a34      	ldr	r2, [pc, #208]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6413      	str	r3, [r2, #64]	@ 0x40
 8004494:	4b32      	ldr	r3, [pc, #200]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044a0:	4b32      	ldr	r3, [pc, #200]	@ (800456c <HAL_RCC_OscConfig+0x418>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a31      	ldr	r2, [pc, #196]	@ (800456c <HAL_RCC_OscConfig+0x418>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044aa:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ac:	f7fe feb6 	bl	800321c <HAL_GetTick>
 80044b0:	6578      	str	r0, [r7, #84]	@ 0x54
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x372>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fe feb2 	bl	800321c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	@ 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x372>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e17a      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c6:	4b29      	ldr	r3, [pc, #164]	@ (800456c <HAL_RCC_OscConfig+0x418>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x360>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80044d2:	4b27      	ldr	r3, [pc, #156]	@ (8004570 <HAL_RCC_OscConfig+0x41c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fe fea0 	bl	800321c <HAL_GetTick>
 80044dc:	6578      	str	r0, [r7, #84]	@ 0x54
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x3a2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fe fe9c 	bl	800321c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x3a2>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e162      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ee      	bne.n	80044e0 <HAL_RCC_OscConfig+0x38c>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <HAL_RCC_OscConfig+0x41c>)
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCC_OscConfig+0x3ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fe fe82 	bl	800321c <HAL_GetTick>
 8004518:	6578      	str	r0, [r7, #84]	@ 0x54
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fe fe7e 	bl	800321c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e144      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_OscConfig+0x40c>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ee      	beq.n	800451c <HAL_RCC_OscConfig+0x3c8>
 800453e:	e01f      	b.n	8004580 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fe fe6c 	bl	800321c <HAL_GetTick>
 8004544:	6578      	str	r0, [r7, #84]	@ 0x54
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e015      	b.n	8004574 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fe fe68 	bl	800321c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d90c      	bls.n	8004574 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e12e      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	080060f4 	.word	0x080060f4
 8004568:	42470e80 	.word	0x42470e80
 800456c:	40007000 	.word	0x40007000
 8004570:	40023870 	.word	0x40023870
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004574:	4b93      	ldr	r3, [pc, #588]	@ (80047c4 <HAL_RCC_OscConfig+0x670>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e3      	bne.n	8004548 <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00c      	beq.n	80045a2 <HAL_RCC_OscConfig+0x44e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_OscConfig+0x44e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d004      	beq.n	80045a2 <HAL_RCC_OscConfig+0x44e>
 8004598:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 800459c:	488a      	ldr	r0, [pc, #552]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 800459e:	f7fd fe2f 	bl	8002200 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8107 	beq.w	80047ba <HAL_RCC_OscConfig+0x666>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ac:	4b85      	ldr	r3, [pc, #532]	@ (80047c4 <HAL_RCC_OscConfig+0x670>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	f000 80fe 	beq.w	80047b6 <HAL_RCC_OscConfig+0x662>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	f040 80e2 	bne.w	8004788 <HAL_RCC_OscConfig+0x634>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_RCC_OscConfig+0x48c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045d4:	d004      	beq.n	80045e0 <HAL_RCC_OscConfig+0x48c>
 80045d6:	f240 71b3 	movw	r1, #1971	@ 0x7b3
 80045da:	487b      	ldr	r0, [pc, #492]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 80045dc:	f7fd fe10 	bl	8002200 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80045e6:	d904      	bls.n	80045f2 <HAL_RCC_OscConfig+0x49e>
 80045e8:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 80045ec:	4876      	ldr	r0, [pc, #472]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 80045ee:	f7fd fe07 	bl	8002200 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	2bbf      	cmp	r3, #191	@ 0xbf
 80045f8:	d904      	bls.n	8004604 <HAL_RCC_OscConfig+0x4b0>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004602:	d904      	bls.n	800460e <HAL_RCC_OscConfig+0x4ba>
 8004604:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8004608:	486f      	ldr	r0, [pc, #444]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 800460a:	f7fd fdf9 	bl	8002200 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	2b02      	cmp	r3, #2
 8004614:	d010      	beq.n	8004638 <HAL_RCC_OscConfig+0x4e4>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	2b04      	cmp	r3, #4
 800461c:	d00c      	beq.n	8004638 <HAL_RCC_OscConfig+0x4e4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	2b06      	cmp	r3, #6
 8004624:	d008      	beq.n	8004638 <HAL_RCC_OscConfig+0x4e4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	2b08      	cmp	r3, #8
 800462c:	d004      	beq.n	8004638 <HAL_RCC_OscConfig+0x4e4>
 800462e:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8004632:	4865      	ldr	r0, [pc, #404]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 8004634:	f7fd fde4 	bl	8002200 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	2b03      	cmp	r3, #3
 800463e:	d903      	bls.n	8004648 <HAL_RCC_OscConfig+0x4f4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	2b0f      	cmp	r3, #15
 8004646:	d904      	bls.n	8004652 <HAL_RCC_OscConfig+0x4fe>
 8004648:	f240 71b7 	movw	r1, #1975	@ 0x7b7
 800464c:	485e      	ldr	r0, [pc, #376]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 800464e:	f7fd fdd7 	bl	8002200 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	2b01      	cmp	r3, #1
 8004658:	d903      	bls.n	8004662 <HAL_RCC_OscConfig+0x50e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	2b07      	cmp	r3, #7
 8004660:	d904      	bls.n	800466c <HAL_RCC_OscConfig+0x518>
 8004662:	f44f 61f7 	mov.w	r1, #1976	@ 0x7b8
 8004666:	4858      	ldr	r0, [pc, #352]	@ (80047c8 <HAL_RCC_OscConfig+0x674>)
 8004668:	f7fd fdca 	bl	8002200 <assert_failed>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <HAL_RCC_OscConfig+0x678>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fe fdd3 	bl	800321c <HAL_GetTick>
 8004676:	6578      	str	r0, [r7, #84]	@ 0x54
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe fdcf 	bl	800321c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b64      	cmp	r3, #100	@ 0x64
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e097      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	4b4d      	ldr	r3, [pc, #308]	@ (80047c4 <HAL_RCC_OscConfig+0x670>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x526>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 80046aa:	6139      	str	r1, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	fa91 f1a1 	rbit	r1, r1
 80046b2:	60f9      	str	r1, [r7, #12]
  return result;
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	6179      	str	r1, [r7, #20]
  if (value == 0U)
 80046b8:	6979      	ldr	r1, [r7, #20]
 80046ba:	2900      	cmp	r1, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x56e>
    return 32U;
 80046be:	2120      	movs	r1, #32
 80046c0:	e003      	b.n	80046ca <HAL_RCC_OscConfig+0x576>
  return __builtin_clz(value);
 80046c2:	6979      	ldr	r1, [r7, #20]
 80046c4:	fab1 f181 	clz	r1, r1
 80046c8:	b2c9      	uxtb	r1, r1
 80046ca:	408b      	lsls	r3, r1
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80046da:	61f9      	str	r1, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	fa91 f1a1 	rbit	r1, r1
 80046e2:	61b9      	str	r1, [r7, #24]
  return result;
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	6239      	str	r1, [r7, #32]
  if (value == 0U)
 80046e8:	6a39      	ldr	r1, [r7, #32]
 80046ea:	2900      	cmp	r1, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_OscConfig+0x59e>
    return 32U;
 80046ee:	2120      	movs	r1, #32
 80046f0:	e003      	b.n	80046fa <HAL_RCC_OscConfig+0x5a6>
  return __builtin_clz(value);
 80046f2:	6a39      	ldr	r1, [r7, #32]
 80046f4:	fab1 f181 	clz	r1, r1
 80046f8:	b2c9      	uxtb	r1, r1
 80046fa:	408b      	lsls	r3, r1
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8004706:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800470a:	fa91 f1a1 	rbit	r1, r1
 800470e:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8004710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004712:	62f9      	str	r1, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004714:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004716:	2900      	cmp	r1, #0
 8004718:	d101      	bne.n	800471e <HAL_RCC_OscConfig+0x5ca>
    return 32U;
 800471a:	2120      	movs	r1, #32
 800471c:	e003      	b.n	8004726 <HAL_RCC_OscConfig+0x5d2>
  return __builtin_clz(value);
 800471e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004720:	fab1 f181 	clz	r1, r1
 8004724:	b2c9      	uxtb	r1, r1
 8004726:	408b      	lsls	r3, r1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8004732:	6379      	str	r1, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004736:	fa91 f1a1 	rbit	r1, r1
 800473a:	6339      	str	r1, [r7, #48]	@ 0x30
  return result;
 800473c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800473e:	63b9      	str	r1, [r7, #56]	@ 0x38
  if (value == 0U)
 8004740:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004742:	2900      	cmp	r1, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_OscConfig+0x5f6>
    return 32U;
 8004746:	2120      	movs	r1, #32
 8004748:	e003      	b.n	8004752 <HAL_RCC_OscConfig+0x5fe>
  return __builtin_clz(value);
 800474a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800474c:	fab1 f181 	clz	r1, r1
 8004750:	b2c9      	uxtb	r1, r1
 8004752:	408b      	lsls	r3, r1
 8004754:	491b      	ldr	r1, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x670>)
 8004756:	4313      	orrs	r3, r2
 8004758:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475a:	4b1c      	ldr	r3, [pc, #112]	@ (80047cc <HAL_RCC_OscConfig+0x678>)
 800475c:	2201      	movs	r2, #1
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe fd5c 	bl	800321c <HAL_GetTick>
 8004764:	6578      	str	r0, [r7, #84]	@ 0x54
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe fd58 	bl	800321c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	@ 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e020      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_RCC_OscConfig+0x670>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x614>
 8004786:	e018      	b.n	80047ba <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <HAL_RCC_OscConfig+0x678>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fe fd45 	bl	800321c <HAL_GetTick>
 8004792:	6578      	str	r0, [r7, #84]	@ 0x54
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x654>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004796:	f7fe fd41 	bl	800321c <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b64      	cmp	r3, #100	@ 0x64
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x654>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e009      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a8:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCC_OscConfig+0x670>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x642>
 80047b4:	e001      	b.n	80047ba <HAL_RCC_OscConfig+0x666>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_RCC_OscConfig+0x668>
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3758      	adds	r7, #88	@ 0x58
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	080060f4 	.word	0x080060f4
 80047cc:	42470060 	.word	0x42470060

080047d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e104      	b.n	80049ec <HAL_SPI_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_SPI_Init+0x2c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047f2:	d003      	beq.n	80047fc <HAL_SPI_Init+0x2c>
 80047f4:	21b8      	movs	r1, #184	@ 0xb8
 80047f6:	487f      	ldr	r0, [pc, #508]	@ (80049f4 <HAL_SPI_Init+0x224>)
 80047f8:	f7fd fd02 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <HAL_SPI_Init+0x50>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480c:	d008      	beq.n	8004820 <HAL_SPI_Init+0x50>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004816:	d003      	beq.n	8004820 <HAL_SPI_Init+0x50>
 8004818:	21b9      	movs	r1, #185	@ 0xb9
 800481a:	4876      	ldr	r0, [pc, #472]	@ (80049f4 <HAL_SPI_Init+0x224>)
 800481c:	f7fd fcf0 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004828:	d007      	beq.n	800483a <HAL_SPI_Init+0x6a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_SPI_Init+0x6a>
 8004832:	21ba      	movs	r1, #186	@ 0xba
 8004834:	486f      	ldr	r0, [pc, #444]	@ (80049f4 <HAL_SPI_Init+0x224>)
 8004836:	f7fd fce3 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_SPI_Init+0x82>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d003      	beq.n	8004852 <HAL_SPI_Init+0x82>
 800484a:	21bb      	movs	r1, #187	@ 0xbb
 800484c:	4869      	ldr	r0, [pc, #420]	@ (80049f4 <HAL_SPI_Init+0x224>)
 800484e:	f7fd fcd7 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_SPI_Init+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d003      	beq.n	800486a <HAL_SPI_Init+0x9a>
 8004862:	21bc      	movs	r1, #188	@ 0xbc
 8004864:	4863      	ldr	r0, [pc, #396]	@ (80049f4 <HAL_SPI_Init+0x224>)
 8004866:	f7fd fccb 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004872:	d00c      	beq.n	800488e <HAL_SPI_Init+0xbe>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_SPI_Init+0xbe>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004884:	d003      	beq.n	800488e <HAL_SPI_Init+0xbe>
 8004886:	21bd      	movs	r1, #189	@ 0xbd
 8004888:	485a      	ldr	r0, [pc, #360]	@ (80049f4 <HAL_SPI_Init+0x224>)
 800488a:	f7fd fcb9 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01f      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d01b      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d017      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	2b18      	cmp	r3, #24
 80048ac:	d013      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d00f      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	2b28      	cmp	r3, #40	@ 0x28
 80048bc:	d00b      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2b30      	cmp	r3, #48	@ 0x30
 80048c4:	d007      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	2b38      	cmp	r3, #56	@ 0x38
 80048cc:	d003      	beq.n	80048d6 <HAL_SPI_Init+0x106>
 80048ce:	21be      	movs	r1, #190	@ 0xbe
 80048d0:	4848      	ldr	r0, [pc, #288]	@ (80049f4 <HAL_SPI_Init+0x224>)
 80048d2:	f7fd fc95 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_SPI_Init+0x11e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	2b80      	cmp	r3, #128	@ 0x80
 80048e4:	d003      	beq.n	80048ee <HAL_SPI_Init+0x11e>
 80048e6:	21bf      	movs	r1, #191	@ 0xbf
 80048e8:	4842      	ldr	r0, [pc, #264]	@ (80049f4 <HAL_SPI_Init+0x224>)
 80048ea:	f7fd fc89 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_SPI_Init+0x136>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d003      	beq.n	8004906 <HAL_SPI_Init+0x136>
 80048fe:	21c0      	movs	r1, #192	@ 0xc0
 8004900:	483c      	ldr	r0, [pc, #240]	@ (80049f4 <HAL_SPI_Init+0x224>)
 8004902:	f7fd fc7d 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_SPI_Init+0x150>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004916:	d003      	beq.n	8004920 <HAL_SPI_Init+0x150>
 8004918:	21c1      	movs	r1, #193	@ 0xc1
 800491a:	4836      	ldr	r0, [pc, #216]	@ (80049f4 <HAL_SPI_Init+0x224>)
 800491c:	f7fd fc70 	bl	8002200 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_SPI_Init+0x162>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004930:	d303      	bcc.n	800493a <HAL_SPI_Init+0x16a>
 8004932:	21c2      	movs	r1, #194	@ 0xc2
 8004934:	482f      	ldr	r0, [pc, #188]	@ (80049f4 <HAL_SPI_Init+0x224>)
 8004936:	f7fd fc63 	bl	8002200 <assert_failed>

  if(hspi->State == HAL_SPI_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_SPI_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fc7a 	bl	8002248 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800496a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004980:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004990:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8004996:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	ea42 0103 	orr.w	r1, r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 80049a8:	430a      	orrs	r2, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049aa:	601a      	str	r2, [r3, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0104 	and.w	r1, r3, #4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049ca:	611a      	str	r2, [r3, #16]

  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049da:	61da      	str	r2, [r3, #28]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	08006130 	.word	0x08006130

080049f8 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	807b      	strh	r3, [r7, #2]
  __IO uint16_t tmpreg;
  uint32_t tmpstate = 0, tmp = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
  
  tmpstate = hspi->State; 
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	61fb      	str	r3, [r7, #28]
  if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d003      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x2e>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2b22      	cmp	r3, #34	@ 0x22
 8004a22:	f040 8249 	bne.w	8004eb8 <HAL_SPI_TransmitReceive+0x4c0>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x40>
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x44>
    {
      return  HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e23e      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
    }

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x56>
 8004a44:	f44f 7126 	mov.w	r1, #664	@ 0x298
 8004a48:	488d      	ldr	r0, [pc, #564]	@ (8004c80 <HAL_SPI_TransmitReceive+0x288>)
 8004a4a:	f7fd fbd9 	bl	8002200 <assert_failed>

    /* Process Locked */
    __HAL_LOCK(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x64>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e22e      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d103      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x80>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2232      	movs	r2, #50	@ 0x32
 8004a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54

    hspi->pRxBuffPtr  = pRxData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->RxXferSize  = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	879a      	strh	r2, [r3, #60]	@ 0x3c
    hspi->RxXferCount = Size;  
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	887a      	ldrh	r2, [r7, #2]
 8004a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->TxXferSize  = Size; 
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	887a      	ldrh	r2, [r7, #2]
 8004a9a:	869a      	strh	r2, [r3, #52]	@ 0x34
    hspi->TxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	86da      	strh	r2, [r3, #54]	@ 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	649a      	str	r2, [r3, #72]	@ 0x48
    hspi->TxISR = 0;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0xe0>
    {
      SPI_RESET_CRC(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad6:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b40      	cmp	r3, #64	@ 0x40
 8004ae4:	d007      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0xfe>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af4:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afe:	f040 80c1 	bne.w	8004c84 <HAL_SPI_TransmitReceive+0x28c>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x124>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b12:	d114      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x146>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d110      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x146>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
      }
      if(hspi->TxXferCount == 0)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d174      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b4e:	d107      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x168>
        {
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b5e:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	2200      	movs	r2, #0
 8004b64:	2101      	movs	r1, #1
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f9ac 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x17e>
        { 
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1a1      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	b292      	uxth	r2, r2
 8004b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b9a:	e122      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x3ea>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f98e 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0x1ba>
          { 
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e183      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	1c9a      	adds	r2, r3, #2
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hspi->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	@ 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x1fe>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be4:	d107      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x1fe>
          {
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bf4:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f961 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x214>
          { 
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e156      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	b292      	uxth	r2, r2
 8004c18:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->RxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        while(hspi->TxXferCount > 0)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1b1      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x1a4>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 80d0 	bne.w	8004de2 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	2200      	movs	r2, #0
 8004c46:	2101      	movs	r1, #1
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f93b 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0x260>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e130      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	b292      	uxth	r2, r2
 8004c64:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->RxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c7c:	e0b1      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x3ea>
 8004c7e:	bf00      	nop
 8004c80:	08006130 	.word	0x08006130
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x2a6>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c94:	d112      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x2c4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d10e      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x2c4>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6311      	str	r1, [r2, #48]	@ 0x30
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	86da      	strh	r2, [r3, #54]	@ 0x36
      }
      if(hspi->TxXferCount == 0)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d16b      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x3a4>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ccc:	d107      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x2e6>
        {
          hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cdc:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f8ed 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0e2      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d0e:	e068      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x3ea>
      else
      {
        while(hspi->TxXferCount > 0)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	2200      	movs	r2, #0
 8004d14:	2102      	movs	r1, #2
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f8d4 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x32e>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0c9      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	6311      	str	r1, [r2, #48]	@ 0x30
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	86da      	strh	r2, [r3, #54]	@ 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x36e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d54:	d107      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x36e>
          {
            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d64:	601a      	str	r2, [r3, #0]
          }

            /* Wait until RXNE flag is set */
            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f8a9 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x384>
            {
              return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e09e      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
            }
            
            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68d8      	ldr	r0, [r3, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	6391      	str	r1, [r2, #56]	@ 0x38
 8004d8c:	b2c2      	uxtb	r2, r0
 8004d8e:	701a      	strb	r2, [r3, #0]
            hspi->RxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        while(hspi->TxXferCount > 0)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1b5      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x318>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d11a      	bne.n	8004de2 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	2200      	movs	r2, #0
 8004db0:	2101      	movs	r1, #1
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f886 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x3ca>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e07b      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68d8      	ldr	r0, [r3, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	1c59      	adds	r1, r3, #1
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6391      	str	r1, [r2, #56]	@ 0x38
 8004dd2:	b2c2      	uxtb	r2, r0
 8004dd4:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dea:	d116      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x422>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	2200      	movs	r2, #0
 8004df0:	2101      	movs	r1, #1
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f866 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x416>
      {
        hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e02:	f043 0202 	orr.w	r2, r3, #2
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e055      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	82fb      	strh	r3, [r7, #22]
      UNUSED(tmpreg);
 8004e18:	8afb      	ldrh	r3, [r7, #22]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2180      	movs	r1, #128	@ 0x80
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f84f 	bl	8004ec4 <SPI_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x444>
    {
      hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e03e      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	61bb      	str	r3, [r7, #24]
    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e62:	d123      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x4b4>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x4b4>
    {
      hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6e:	f043 0202 	orr.w	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Reset CRC Calculation */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x4a8>
      {
        SPI_RESET_CRC(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e9e:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      
      return HAL_ERROR; 
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e006      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_SPI_TransmitReceive+0x4c2>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop

08004ec4 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004ed8:	f7fe f9a0 	bl	800321c <HAL_GetTick>
 8004edc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 8086 	bne.w	8004ff2 <SPI_WaitOnFlagUntilTimeout+0x12e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8004ee6:	e03d      	b.n	8004f64 <SPI_WaitOnFlagUntilTimeout+0xa0>
    {
      if(Timeout != HAL_MAX_DELAY)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d039      	beq.n	8004f64 <SPI_WaitOnFlagUntilTimeout+0xa0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <SPI_WaitOnFlagUntilTimeout+0x42>
 8004ef6:	f7fe f991 	bl	800321c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d22e      	bcs.n	8004f64 <SPI_WaitOnFlagUntilTimeout+0xa0>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f14:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f24:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f2e:	d10f      	bne.n	8004f50 <SPI_WaitOnFlagUntilTimeout+0x8c>
          {
            SPI_RESET_CRC(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f4e:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e04f      	b.n	8005004 <SPI_WaitOnFlagUntilTimeout+0x140>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d1b9      	bne.n	8004ee8 <SPI_WaitOnFlagUntilTimeout+0x24>
 8004f74:	e045      	b.n	8005002 <SPI_WaitOnFlagUntilTimeout+0x13e>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d039      	beq.n	8004ff2 <SPI_WaitOnFlagUntilTimeout+0x12e>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <SPI_WaitOnFlagUntilTimeout+0xd0>
 8004f84:	f7fe f94a 	bl	800321c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d22e      	bcs.n	8004ff2 <SPI_WaitOnFlagUntilTimeout+0x12e>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fa2:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb2:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fbc:	d10f      	bne.n	8004fde <SPI_WaitOnFlagUntilTimeout+0x11a>
          {
            SPI_RESET_CRC(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fdc:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e008      	b.n	8005004 <SPI_WaitOnFlagUntilTimeout+0x140>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d0b9      	beq.n	8004f76 <SPI_WaitOnFlagUntilTimeout+0xb2>
        }
      }
    }
  }
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e09a      	b.n	8005154 <HAL_UART_Init+0x148>
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02a      	beq.n	800507c <HAL_UART_Init+0x70>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a4c      	ldr	r2, [pc, #304]	@ (800515c <HAL_UART_Init+0x150>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00d      	beq.n	800504c <HAL_UART_Init+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a4a      	ldr	r2, [pc, #296]	@ (8005160 <HAL_UART_Init+0x154>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d008      	beq.n	800504c <HAL_UART_Init+0x40>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a49      	ldr	r2, [pc, #292]	@ (8005164 <HAL_UART_Init+0x158>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <HAL_UART_Init+0x40>
 8005044:	21fc      	movs	r1, #252	@ 0xfc
 8005046:	4848      	ldr	r0, [pc, #288]	@ (8005168 <HAL_UART_Init+0x15c>)
 8005048:	f7fd f8da 	bl	8002200 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d027      	beq.n	80050a4 <HAL_UART_Init+0x98>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800505c:	d022      	beq.n	80050a4 <HAL_UART_Init+0x98>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005066:	d01d      	beq.n	80050a4 <HAL_UART_Init+0x98>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005070:	d018      	beq.n	80050a4 <HAL_UART_Init+0x98>
 8005072:	21fd      	movs	r1, #253	@ 0xfd
 8005074:	483c      	ldr	r0, [pc, #240]	@ (8005168 <HAL_UART_Init+0x15c>)
 8005076:	f7fd f8c3 	bl	8002200 <assert_failed>
 800507a:	e013      	b.n	80050a4 <HAL_UART_Init+0x98>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a36      	ldr	r2, [pc, #216]	@ (800515c <HAL_UART_Init+0x150>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_UART_Init+0x98>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a35      	ldr	r2, [pc, #212]	@ (8005160 <HAL_UART_Init+0x154>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_UART_Init+0x98>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <HAL_UART_Init+0x158>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_UART_Init+0x98>
 800509a:	f240 1101 	movw	r1, #257	@ 0x101
 800509e:	4832      	ldr	r0, [pc, #200]	@ (8005168 <HAL_UART_Init+0x15c>)
 80050a0:	f7fd f8ae 	bl	8002200 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <HAL_UART_Init+0xb4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d004      	beq.n	80050c0 <HAL_UART_Init+0xb4>
 80050b6:	f240 1103 	movw	r1, #259	@ 0x103
 80050ba:	482b      	ldr	r0, [pc, #172]	@ (8005168 <HAL_UART_Init+0x15c>)
 80050bc:	f7fd f8a0 	bl	8002200 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_UART_Init+0xd0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d0:	d004      	beq.n	80050dc <HAL_UART_Init+0xd0>
 80050d2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80050d6:	4824      	ldr	r0, [pc, #144]	@ (8005168 <HAL_UART_Init+0x15c>)
 80050d8:	f7fd f892 	bl	8002200 <assert_failed>
  
  if(huart->State == HAL_UART_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_UART_Init+0xea>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fd f933 	bl	800235c <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fbac 	bl	800586c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005122:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005132:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005142:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->State= HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40011000 	.word	0x40011000
 8005160:	40004400 	.word	0x40004400
 8005164:	40011400 	.word	0x40011400
 8005168:	08006168 	.word	0x08006168

0800516c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp1 = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  
  tmp1 = huart->State;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005186:	b2db      	uxtb	r3, r3
 8005188:	617b      	str	r3, [r7, #20]
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d003      	beq.n	8005198 <HAL_UART_Transmit+0x2c>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b22      	cmp	r3, #34	@ 0x22
 8005194:	f040 808e 	bne.w	80052b4 <HAL_UART_Transmit+0x148>
  {
    if((pData == NULL ) || (Size == 0)) 
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Transmit+0x38>
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e086      	b.n	80052b6 <HAL_UART_Transmit+0x14a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Transmit+0x4a>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e07f      	b.n	80052b6 <HAL_UART_Transmit+0x14a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b22      	cmp	r3, #34	@ 0x22
 80051ce:	d104      	bne.n	80051da <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2232      	movs	r2, #50	@ 0x32
 80051d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80051d8:	e003      	b.n	80051e2 <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2212      	movs	r2, #18
 80051de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }

    huart->TxXferSize = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    while(huart->TxXferCount > 0)
 80051ee:	e03d      	b.n	800526c <HAL_UART_Transmit+0x100>
    {
      huart->TxXferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	84da      	strh	r2, [r3, #38]	@ 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005204:	d120      	bne.n	8005248 <HAL_UART_Transmit+0xdc>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2200      	movs	r2, #0
 800520a:	2180      	movs	r1, #128	@ 0x80
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f971 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_UART_Transmit+0xb0>
        { 
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e04c      	b.n	80052b6 <HAL_UART_Transmit+0x14a>
        }
        tmp = (uint16_t*) pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522e:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <HAL_UART_Transmit+0xd4>
        {
          pData +=2;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3302      	adds	r3, #2
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	e015      	b.n	800526c <HAL_UART_Transmit+0x100>
        }
        else
        { 
          pData +=1;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	3301      	adds	r3, #1
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	e011      	b.n	800526c <HAL_UART_Transmit+0x100>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	@ 0x80
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f950 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_UART_Transmit+0xf2>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e02b      	b.n	80052b6 <HAL_UART_Transmit+0x14a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	60ba      	str	r2, [r7, #8]
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1bd      	bne.n	80051f0 <HAL_UART_Transmit+0x84>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	2140      	movs	r1, #64	@ 0x40
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f93a 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_UART_Transmit+0x11e>
    { 
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e015      	b.n	80052b6 <HAL_UART_Transmit+0x14a>
    }
    
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b32      	cmp	r3, #50	@ 0x32
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x134>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2222      	movs	r2, #34	@ 0x22
 800529a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x13c>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    
    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;   
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b088      	sub	sp, #32
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	61bb      	str	r3, [r7, #24]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <HAL_UART_IRQHandler+0x5c>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <HAL_UART_IRQHandler+0x5c>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697b      	ldr	r3, [r7, #20]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	61bb      	str	r3, [r7, #24]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d011      	beq.n	8005366 <HAL_UART_IRQHandler+0xa8>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <HAL_UART_IRQHandler+0xa8>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	f043 0204 	orr.w	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	61bb      	str	r3, [r7, #24]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <HAL_UART_IRQHandler+0xf4>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <HAL_UART_IRQHandler+0xf4>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053aa:	f043 0202 	orr.w	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d011      	beq.n	80053fe <HAL_UART_IRQHandler+0x140>
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <HAL_UART_IRQHandler+0x140>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f6:	f043 0208 	orr.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b20      	cmp	r3, #32
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	61bb      	str	r3, [r7, #24]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_UART_IRQHandler+0x174>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_UART_IRQHandler+0x174>
  { 
    UART_Receive_IT(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f98a 	bl	8005746 <UART_Receive_IT>
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543c:	2b80      	cmp	r3, #128	@ 0x80
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0x1a8>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_UART_IRQHandler+0x1a8>
  {
    UART_Transmit_IT(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f8e0 	bl	8005626 <UART_Transmit_IT>
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005486:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0x1dc>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_IRQHandler+0x1dc>
  {
    UART_EndTransmit_IT(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f923 	bl	80056e0 <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <HAL_UART_IRQHandler+0x1f2>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f818 	bl	80054e0 <HAL_UART_ErrorCallback>
  }  
}
 80054b0:	bf00      	nop
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005508:	f7fd fe88 	bl	800321c <HAL_GetTick>
 800550c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d17b      	bne.n	800560c <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8005514:	e038      	b.n	8005588 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d034      	beq.n	8005588 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x40>
 8005524:	f7fd fe7a 	bl	800321c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d229      	bcs.n	8005588 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005542:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0220 	bic.w	r2, r2, #32
 8005552:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005562:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e04a      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d1be      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x22>
 8005598:	e040      	b.n	800561c <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d034      	beq.n	800560c <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <UART_WaitOnFlagUntilTimeout+0xc4>
 80055a8:	f7fd fe38 	bl	800321c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d229      	bcs.n	800560c <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055c6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0220 	bic.w	r2, r2, #32
 80055d6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055e6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e008      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	d0be      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp1 = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  
  tmp1 = huart->State;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005638:	b2db      	uxtb	r3, r3
 800563a:	60fb      	str	r3, [r7, #12]
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b12      	cmp	r3, #18
 8005640:	d002      	beq.n	8005648 <UART_Transmit_IT+0x22>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b32      	cmp	r3, #50	@ 0x32
 8005646:	d144      	bne.n	80056d2 <UART_Transmit_IT+0xac>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005650:	d11a      	bne.n	8005688 <UART_Transmit_IT+0x62>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005666:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <UART_Transmit_IT+0x56>
      {
        huart->pTxBuffPtr += 2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]
 800567a:	e00e      	b.n	800569a <UART_Transmit_IT+0x74>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]
 8005686:	e008      	b.n	800569a <UART_Transmit_IT+0x74>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6211      	str	r1, [r2, #32]
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	84da      	strh	r2, [r3, #38]	@ 0x26
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <UART_Transmit_IT+0xa8>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e000      	b.n	80056d4 <UART_Transmit_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 80056d2:	2302      	movs	r3, #2
  }
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f6:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b32      	cmp	r3, #50	@ 0x32
 8005702:	d104      	bne.n	800570e <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2222      	movs	r2, #34	@ 0x22
 8005708:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800570c:	e013      	b.n	8005736 <UART_EndTransmit_IT+0x56>
  }
  else
  {
    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800571c:	60da      	str	r2, [r3, #12]

    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0201 	bic.w	r2, r2, #1
 800572c:	615a      	str	r2, [r3, #20]

    huart->State = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff febe 	bl	80054b8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp1 = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
  
  tmp1 = huart->State; 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005758:	b2db      	uxtb	r3, r3
 800575a:	60fb      	str	r3, [r7, #12]
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b22      	cmp	r3, #34	@ 0x22
 8005760:	d002      	beq.n	8005768 <UART_Receive_IT+0x22>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b32      	cmp	r3, #50	@ 0x32
 8005766:	d17c      	bne.n	8005862 <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005770:	d123      	bne.n	80057ba <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10e      	bne.n	800579e <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578c:	b29a      	uxth	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	1c9a      	adds	r2, r3, #2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
 800579c:	e029      	b.n	80057f2 <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80057b8:	e01b      	b.n	80057f2 <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6858      	ldr	r0, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	1c59      	adds	r1, r3, #1
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6291      	str	r1, [r2, #40]	@ 0x28
 80057d2:	b2c2      	uxtb	r2, r0
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e00c      	b.n	80057f2 <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	1c58      	adds	r0, r3, #1
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	6288      	str	r0, [r1, #40]	@ 0x28
 80057ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005802:	2b00      	cmp	r3, #0
 8005804:	d12b      	bne.n	800585e <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0220 	bic.w	r2, r2, #32
 8005814:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b32      	cmp	r3, #50	@ 0x32
 8005820:	d104      	bne.n	800582c <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2212      	movs	r2, #18
 8005826:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800582a:	e013      	b.n	8005854 <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800583a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fe39 	bl	80054cc <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e002      	b.n	8005864 <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4aa9      	ldr	r2, [pc, #676]	@ (8005b24 <UART_SetConfig+0x2b8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d904      	bls.n	800588c <UART_SetConfig+0x20>
 8005882:	f240 7136 	movw	r1, #1846	@ 0x736
 8005886:	48a8      	ldr	r0, [pc, #672]	@ (8005b28 <UART_SetConfig+0x2bc>)
 8005888:	f7fc fcba 	bl	8002200 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <UART_SetConfig+0x3c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589c:	d004      	beq.n	80058a8 <UART_SetConfig+0x3c>
 800589e:	f240 7137 	movw	r1, #1847	@ 0x737
 80058a2:	48a1      	ldr	r0, [pc, #644]	@ (8005b28 <UART_SetConfig+0x2bc>)
 80058a4:	f7fc fcac 	bl	8002200 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00e      	beq.n	80058ce <UART_SetConfig+0x62>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b8:	d009      	beq.n	80058ce <UART_SetConfig+0x62>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80058c2:	d004      	beq.n	80058ce <UART_SetConfig+0x62>
 80058c4:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 80058c8:	4897      	ldr	r0, [pc, #604]	@ (8005b28 <UART_SetConfig+0x2bc>)
 80058ca:	f7fc fc99 	bl	8002200 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <UART_SetConfig+0x78>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <UART_SetConfig+0x82>
 80058e4:	f240 7139 	movw	r1, #1849	@ 0x739
 80058e8:	488f      	ldr	r0, [pc, #572]	@ (8005b28 <UART_SetConfig+0x2bc>)
 80058ea:	f7fc fc89 	bl	8002200 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800591e:	f023 030c 	bic.w	r3, r3, #12
 8005922:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4313      	orrs	r3, r2
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005956:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005972:	f040 808c 	bne.w	8005a8e <UART_SetConfig+0x222>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6c      	ldr	r2, [pc, #432]	@ (8005b2c <UART_SetConfig+0x2c0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <UART_SetConfig+0x11e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a6a      	ldr	r2, [pc, #424]	@ (8005b30 <UART_SetConfig+0x2c4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d140      	bne.n	8005a0c <UART_SetConfig+0x1a0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800598a:	f7fe fbb9 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 800598e:	4602      	mov	r2, r0
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009a      	lsls	r2, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	4a63      	ldr	r2, [pc, #396]	@ (8005b34 <UART_SetConfig+0x2c8>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	011c      	lsls	r4, r3, #4
 80059ae:	f7fe fba7 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009a      	lsls	r2, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80059c8:	f7fe fb9a 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009a      	lsls	r2, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	4a54      	ldr	r2, [pc, #336]	@ (8005b34 <UART_SetConfig+0x2c8>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	2264      	movs	r2, #100	@ 0x64
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	1aeb      	subs	r3, r5, r3
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	3332      	adds	r3, #50	@ 0x32
 80059f6:	4a4f      	ldr	r2, [pc, #316]	@ (8005b34 <UART_SetConfig+0x2c8>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	f003 020f 	and.w	r2, r3, #15
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4322      	orrs	r2, r4
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	e0d6      	b.n	8005bba <UART_SetConfig+0x34e>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a0c:	f7fe fb4e 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009a      	lsls	r2, r3, #2
 8005a1a:	441a      	add	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	4a43      	ldr	r2, [pc, #268]	@ (8005b34 <UART_SetConfig+0x2c8>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	011c      	lsls	r4, r3, #4
 8005a30:	f7fe fb3c 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005a34:	4602      	mov	r2, r0
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009a      	lsls	r2, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a4a:	f7fe fb2f 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009a      	lsls	r2, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	4a33      	ldr	r2, [pc, #204]	@ (8005b34 <UART_SetConfig+0x2c8>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2264      	movs	r2, #100	@ 0x64
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	1aeb      	subs	r3, r5, r3
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	3332      	adds	r3, #50	@ 0x32
 8005a78:	4a2e      	ldr	r2, [pc, #184]	@ (8005b34 <UART_SetConfig+0x2c8>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4322      	orrs	r2, r4
 8005a8a:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005a8c:	e095      	b.n	8005bba <UART_SetConfig+0x34e>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a26      	ldr	r2, [pc, #152]	@ (8005b2c <UART_SetConfig+0x2c0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <UART_SetConfig+0x236>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a24      	ldr	r2, [pc, #144]	@ (8005b30 <UART_SetConfig+0x2c4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d14a      	bne.n	8005b38 <UART_SetConfig+0x2cc>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005aa2:	f7fe fb2d 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009a      	lsls	r2, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b34 <UART_SetConfig+0x2c8>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	011c      	lsls	r4, r3, #4
 8005ac6:	f7fe fb1b 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005aca:	4602      	mov	r2, r0
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009a      	lsls	r2, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ae0:	f7fe fb0e 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009a      	lsls	r2, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afa:	4a0e      	ldr	r2, [pc, #56]	@ (8005b34 <UART_SetConfig+0x2c8>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	2264      	movs	r2, #100	@ 0x64
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	1aeb      	subs	r3, r5, r3
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	3332      	adds	r3, #50	@ 0x32
 8005b0e:	4a09      	ldr	r2, [pc, #36]	@ (8005b34 <UART_SetConfig+0x2c8>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4322      	orrs	r2, r4
 8005b20:	609a      	str	r2, [r3, #8]
 8005b22:	e04a      	b.n	8005bba <UART_SetConfig+0x34e>
 8005b24:	00a037a0 	.word	0x00a037a0
 8005b28:	08006168 	.word	0x08006168
 8005b2c:	40011000 	.word	0x40011000
 8005b30:	40011400 	.word	0x40011400
 8005b34:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b38:	f7fe fab8 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009a      	lsls	r2, r3, #2
 8005b46:	441a      	add	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <UART_SetConfig+0x358>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	011c      	lsls	r4, r3, #4
 8005b5c:	f7fe faa6 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009a      	lsls	r2, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b76:	f7fe fa99 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009a      	lsls	r2, r3, #2
 8005b84:	441a      	add	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc4 <UART_SetConfig+0x358>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2264      	movs	r2, #100	@ 0x64
 8005b9a:	fb02 f303 	mul.w	r3, r2, r3
 8005b9e:	1aeb      	subs	r3, r5, r3
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	3332      	adds	r3, #50	@ 0x32
 8005ba4:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <UART_SetConfig+0x358>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4322      	orrs	r2, r4
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	e7ff      	b.n	8005bba <UART_SetConfig+0x34e>
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	51eb851f 	.word	0x51eb851f

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4d0d      	ldr	r5, [pc, #52]	@ (8005c00 <__libc_init_array+0x38>)
 8005bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8005c04 <__libc_init_array+0x3c>)
 8005bce:	1b64      	subs	r4, r4, r5
 8005bd0:	10a4      	asrs	r4, r4, #2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8005c08 <__libc_init_array+0x40>)
 8005bda:	4c0c      	ldr	r4, [pc, #48]	@ (8005c0c <__libc_init_array+0x44>)
 8005bdc:	f000 f818 	bl	8005c10 <_init>
 8005be0:	1b64      	subs	r4, r4, r5
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	2600      	movs	r6, #0
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08006794 	.word	0x08006794
 8005c04:	08006794 	.word	0x08006794
 8005c08:	08006794 	.word	0x08006794
 8005c0c:	08006798 	.word	0x08006798

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
